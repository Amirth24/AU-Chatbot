This document contains information about the department B.E. Computer Science and Engineering.



Here is the breakdown of Semester III courses:

1. **Mathematics - III (21CSBS301)**
   - Category: BS-V
   - Credits: 4
   - Lectures (L): 3
   - Tutorials (T): 1
   - Practical (P): -
   - Continuous Assessment (CA): 25
   - Final Exam (FE): 75

2. **Environmental Studies (21ETES302)**
   - Category: ES-III
   - Credits: 3
   - Lectures (L): 3
   - Tutorials (T): -
   - Practical (P): -
   - Continuous Assessment (CA): 25
   - Final Exam (FE): 75

3. **Analog Electronic Circuits (21CSES303)**
   - Category: ES-IV
   - Credits: 3
   - Lectures (L): 3
   - Tutorials (T): -
   - Practical (P): -
   - Continuous Assessment (CA): 25
   - Final Exam (FE): 75

4. **Digital Electronics (21CSES304)**
   - Category: ES-V
   - Credits: 2
   - Lectures (L): 2
   - Tutorials (T): -
   - Practical (P): -
   - Continuous Assessment (CA): 25
   - Final Exam (FE): 75

5. **Data Structures and Algorithms (21CSPC305)**
   - Category: PC-I
   - Credits: 3
   - Lectures (L): 3
   - Tutorials (T): -
   - Practical (P): -
   - Continuous Assessment (CA): 25
   - Final Exam (FE): 75

6. **Object-Oriented Programming (21CSPC306)**
   - Category: PC-II
   - Credits: 4
   - Lectures (L): 3
   - Tutorials (T): 1
   - Practical (P): -
   - Continuous Assessment (CA): 25
   - Final Exam (FE): 75

Lab Courses:
- **Digital Electronics Lab (21CSSP307)**
  - Category: ESP-V
  - Credits: 1.5
  - Practical (P): 3
  - Continuous Assessment (CA): 40
  - Final Exam (FE): 60

- **Data Structures and Algorithms Lab (21CSCP308)**
  - Category: PCP-I
  - Credits: 1.5
  - Practical (P): 3
  - Continuous Assessment (CA): 40
  - Final Exam (FE): 60

- **Object-Oriented Programming Lab (21CSCP309)**
  - Category: PCP-II
  - Credits: 1.5
  - Practical (P): 3
  - Continuous Assessment (CA): 40
  - Final Exam (FE): 60

Total Credits: 23.5
Here is the breakdown of Semester IV courses:

1. **Discrete Mathematics (21CSBS401)**
   - Category: BS-VI
   - Credits: 3
   - Lectures (L): 3
   - Tutorials (T): -
   - Practical (P): -
   - Continuous Assessment (CA): 25
   - Final Exam (FE): 75

2. **Design and Analysis of Algorithms (21CSES402)**
   - Category: ES-VI
   - Credits: 2
   - Lectures (L): 2
   - Tutorials (T): -
   - Practical (P): -
   - Continuous Assessment (CA): 25
   - Final Exam (FE): 75

3. **Database Management Systems (21CSPC403)**
   - Category: PC-III
   - Credits: 3
   - Lectures (L): 3
   - Tutorials (T): -
   - Practical (P): -
   - Continuous Assessment (CA): 25
   - Final Exam (FE): 75

4. **Operating Systems (21CSPC404)**
   - Category: PC-IV
   - Credits: 3
   - Lectures (L): 3
   - Tutorials (T): -
   - Practical (P): -
   - Continuous Assessment (CA): 25
   - Final Exam (FE): 75

5. **Python Programming (21CSPC405)**
   - Category: PC-V
   - Credits: 3
   - Lectures (L): 3
   - Tutorials (T): -
   - Practical (P): -
   - Continuous Assessment (CA): 25
   - Final Exam (FE): 75

6. **Computer Organization and Architecture (21CSPC406)**
   - Category: PC-VI
   - Credits: 3
   - Lectures (L): 3
   - Tutorials (T): -
   - Practical (P): -
   - Continuous Assessment (CA): 25
   - Final Exam (FE): 75

7. **Universal Human Values (21ETHS407)**
   - Category: PC-VII
   - Credits: 3
   - Lectures (L): 2
   - Tutorials (T): 1
   - Practical (P): -
   - Continuous Assessment (CA): 25
   - Final Exam (FE): 75

8. **Database Management Systems Lab (21CSCP407)**
   - Category: PCP-III
   - Credits: 1.5
   - Practical (P): 3
   - Continuous Assessment (CA): 40
   - Final Exam (FE): 60

9. **Operating Systems Lab (21CSCP408)**
   - Category: PCP-IV
   - Credits: 1.5
   - Practical (P): 3
   - Continuous Assessment (CA): 40
   - Final Exam (FE): 60

10. **Python Programming Lab (21CSCP409)**
    - Category: PCP-V
    - Credits: 1.5
    - Practical (P): 3
    - Continuous Assessment (CA): 40
    - Final Exam (FE): 60

Total Credits: 24.5

Here are the details for Semester V courses:

1. **Theory of Computation (21CSPC501)**
   - Category: PC-VII
   - Credits: 3
   - Lectures (L): 3
   - Tutorials (T): -
   - Practical (P): -
   - Continuous Assessment (CA): 25
   - Final Exam (FE): 75

2. **Computer Graphics and Multimedia (21CSPC502)**
   - Category: PC-VIII
   - Credits: 3
   - Lectures (L): 3
   - Tutorials (T): -
   - Practical (P): -
   - Continuous Assessment (CA): 25
   - Final Exam (FE): 75

3. **Professional Elective I (21CSPC503)**
   - Category: PC-IX
   - Credits: 3
   - Lectures (L): 3
   - Tutorials (T): -
   - Practical (P): 3
   - Continuous Assessment (CA): 40
   - Final Exam (FE): 60

4. **Computer Networks (21CSPC504)**
   - Category: PC-X
   - Credits: 3
   - Lectures (L): 3
   - Tutorials (T): -
   - Practical (P): 3
   - Continuous Assessment (CA): 40
   - Final Exam (FE): 60

5. **Microprocessors (21CSPE505)**
   - Category: PE-I
   - Credits: 3
   - Lectures (L): 3
   - Tutorials (T): -
   - Practical (P): 3
   - Continuous Assessment (CA): 40
   - Final Exam (FE): 60

6. **Professional Elective II (21CSPE506)**
   - Category: PE-II
   - Credits: 3
   - Lectures (L): 3
   - Tutorials (T): -
   - Practical (P): 3
   - Continuous Assessment (CA): 40
   - Final Exam (FE): 60

7. **Computer Graphics and Multimedia Lab (21CSCP507)**
   - Category: PCP-VI
   - Credits: 1.5
   - Practical (P): 3
   - Continuous Assessment (CA): 40
   - Final Exam (FE): 60

8. **Computer Networks Lab (21CSCP508)**
   - Category: PCP-VII
   - Credits: 1.5
   - Practical (P): 3
   - Continuous Assessment (CA): 40
   - Final Exam (FE): 60

9. **Microprocessors Lab (21CSCP509)**
   - Category: PCP-VIII
   - Credits: 1.5
   - Practical (P): 3
   - Continuous Assessment (CA): 25
   - Final Exam (FE): 75

10. **Industrial Training / Rural Internship/Innovation/Entrepreneurship (21ETIT510)**
    - Category: IT-II
    - Credits: 4.0
    - Evaluation: 100 (to be evaluated in IV Semester)

Total Credits: 26.5

SHere are the details for Semester VI courses:

1. **Compiler Design (21CSPC601)**
   - Category: PC-XI
   - Credits: 3
   - Lectures (L): 3
   - Tutorials (T): -
   - Practical (P): -
   - Continuous Assessment (CA): 25
   - Final Exam (FE): 75

2. **Software Engineering (21CSPC602)**
   - Category: PC-XII
   - Credits: 3
   - Lectures (L): 3
   - Tutorials (T): -
   - Practical (P): 3
   - Continuous Assessment (CA): 25
   - Final Exam (FE): 75

3. **Professional Elective - III (21CSPE603)**
   - Category: PE-III
   - Credits: 3
   - Lectures (L): 3
   - Tutorials (T): -
   - Practical (P): 3
   - Continuous Assessment (CA): 25
   - Final Exam (FE): 75

4. **Professional Elective - IV (21CSPE604)**
   - Category: PE-IV
   - Credits: 3
   - Lectures (L): 3
   - Tutorials (T): -
   - Practical (P): 3
   - Continuous Assessment (CA): 25
   - Final Exam (FE): 75

5. **Professional Elective - V (21CSPE605)**
   - Category: PE-V
   - Credits: 3
   - Lectures (L): 3
   - Tutorials (T): -
   - Practical (P): 3
   - Continuous Assessment (CA): 25
   - Final Exam (FE): 75

6. **Open Elective - I (21YYOE606)**
   - Category: OE-I (inter-department FEAT)
   - Credits: 3
   - Lectures (L): -
   - Tutorials (T): -
   - Practical (P): 3
   - Continuous Assessment (CA): 40
   - Final Exam (FE): 60

7. **Compiler Design Lab (21CSCP607)**
   - Category: PCP-IX
   - Credits: 1.5
   - Practical (P): 3
   - Continuous Assessment (CA): 40
   - Final Exam (FE): 60

8. **Software Engineering Lab (21CSCP608)**
   - Category: PCP-X
   - Credits: 1.5
   - Practical (P): 3
   - Continuous Assessment (CA): 40
   - Final Exam (FE): 60

Total Credits: 25.5
Here are the details for Semester VII and Semester VIII courses:

**SEMESTER VII**
1. **Engineering Ethics (21ETHS701)**
   - Category: HS-II
   - Credits: 2
   - Lectures (L): 2
   - Tutorials (T): 3
   - Practical (P): -
   - Continuous Assessment (CA): 25
   - Final Exam (FE): 75
   - Total Credits: 3

2. **Embedded Systems and Internet of Things (IoT) (21CSPC702)**
   - Category: PC-XIII
   - Credits: 3
   - Lectures (L): 2
   - Tutorials (T): 3
   - Practical (P): -
   - Continuous Assessment (CA): 25
   - Final Exam (FE): 75
   - Total Credits: 3

3. **Professional Elective - VI (21CSPE703)**
   - Category: PE-VI
   - Credits: 3
   - Lectures (L): -
   - Tutorials (T): -
   - Practical (P): 3
   - Continuous Assessment (CA): 25
   - Final Exam (FE): 75
   - Total Credits: 3

4. **Professional Elective - VII (21CSPE704)**
   - Category: PE-VII
   - Credits: 3
   - Lectures (L): -
   - Tutorials (T): -
   - Practical (P): 3
   - Continuous Assessment (CA): 25
   - Final Exam (FE): 75
   - Total Credits: 3

5. **Open Elective - II (21YYOE705)**
   - Category: OE-II (inter-department - Allied Branch)
   - Credits: 3
   - Lectures (L): -
   - Tutorials (T): -
   - Practical (P): 3
   - Continuous Assessment (CA): 25
   - Final Exam (FE): 75
   - Total Credits: 3

6. **Embedded Systems and Internet of Things (IoT) Lab (21CSPC706)**
   - Category: PCP-XI
   - Credits: 1.5
   - Lectures (L): -
   - Tutorials (T): -
   - Practical (P): 3
   - Continuous Assessment (CA): 40
   - Final Exam (FE): 60
   - Total Credits: 1.5

7. **Industrial Training / Rural Internship/Innovation / Entrepreneurship (21ETIT707)**
   - Category: IT-III
   - Credits: 4
   - Total Credits: 4

**SEMESTER VIII**
1. **Open Elective – III (21CSOE802)**
   - Category: OE-III (Open Elective from the same Department)
   - Credits: Not specified

2. **Open Elective – IV (21CSOE802)**
   - Category: OE-IV (Open Elective from the same Department)
   - Credits: Not specified

Here are the details for the course 21CSPV803 (PV-I) and 21CSOE801 (Project Work and Viva Voce):

**21CSPV803 (PV-I)**

- Credits: 3
- Lectures (L): 3
- Tutorials (T): -
- Practical (P): -
- Continuous Assessment (CA): 25
- Final Exam (FE): 75
- Total Credits: 3

**21CSOE801 (Project Work and Viva Voce)**

- Credits: 6
- Lectures (L): 3 (No. of Hours for Discussion on Industrial Training)
- Tutorials (T): -
- Practical (P): 10 (No. of Seminar Hours on Industrial Training / Project)
- Continuous Assessment (CA): 40
- Final Exam (FE): 60
- Total Credits: 6



HAND BOOK - R2021

PE – PROFESSIONAL ELECTIVES
1. Perl Programming
2. Visual Programming
3. Web Technology
4. Real Time Systems
5. Distributed Systems
6. Mobile App Development
7. Software Testing and Quality Assurance
8. Mobile Computing
9. Cryptography and Network Security
10. Pervasive Computing
11. Adhoc and sensor Networks
12. Digital Image Processing
13. Machine Learning
14. Digital Signal Processing
15. Cloud Computing
16. Speech Processing and Synthesis
17. Information Retrieval Techniques
18. Data Mining
19. Web Application Framework
20. Open Source Programming
21. Soft Computing Techniques

OE- open elective courses available:

Internet of Things
Enterprise Resource Planning
E-Commerce
Supply Chain Management
Cyber Forensics
System Modeling and Simulation
Big Data Analytics
Social Network Analysis

Here are the lists of Honours Elective Courses and Minor Engineering Elective Courses:

**Honours Elective Courses:**
1. Software Project Management (or) Nano Computing - 4 Credits
2. Artificial Intelligence - 4 Credits
3. Graph Theory - 3 Credits
4. Deep Learning (or) Operation Research (or) Parallel and Distributed Algorithms (or) Digital Watermarking and Steganography - 3 Credits each

**Minor Engineering Elective Courses:**
1. Object-Oriented Programming - 4 Credits
2. Database Management Systems (or) Software Engineering - 4 Credits
3. Computer Networks - 4 Credits
4. Mobile App Development - 3 Credits
5. Internet of Things - 3 Credits
6. Big Data Analytics (or) Social Network Analysis - 3 Credits each



The course 21CSBS301, Mathematics - III, focuses on fundamental mathematical concepts that are essential for engineering students. Here are the course objectives and outcomes:

**Course Objectives:**
1. Familiarize students with the basic concepts of partial differential equations for solving real-world problems.
2. Introduce Fourier series, which is crucial in computing studies.
3. Solve boundary value problems to investigate important features of electromagnetic theory.
4. Provide basics of Fourier transform for solving problems related to frequency response of filters and signal analysis.
5. Impart knowledge about z-transform, which is significant in communication engineering development.

**Course Outline:**
1. **Partial Differential Equations:** Formation, solution of standard types, Lagrange’s linear equation, and second-order linear PDEs with constant coefficients.
2. **Fourier Series:** Dirichlet's conditions, general Fourier series, odd and even functions, half-range sine and cosine series, complex form of Fourier series, Parseval’s identity.
3. **Boundary Value Problems:** Solutions of wave and heat equations, Fourier series solutions in Cartesian coordinates.
4. **Fourier Transform:** Fourier integral theorem, Fourier transform pair, sine and cosine transforms, properties, convolution theorem, Parseval’s identity.
5. **Z-Transform:** Elementary properties, inverse Z-transform, convolution theorem, solution of difference equations using Z-transform.

**Text Books:**
1. Kandasamy P, Tilagavathy K, Gunavathy K. "Engineering Mathematics", 6th edition, S.Chand & Co Ltd., New Delhi, 2006.
2. Ventakataraman M K. "Engineering Mathematics", The National Publishing Co., Chennai, 2003.

**References:**
1. Veerarajan T. "Engineering Mathematics", 3rd edition, Tata McGraw Hill Pub., 2005.
2. Singaravelu A. "Engineering Mathematics", Meenakshi Publications, Chennai, 2004.

**Course Outcomes:**
1. Acquire a basic understanding of common partial differential equations.
2. Understand the concepts and applications of Fourier series.
3. Analyze and solve boundary value problems.
4. Investigate and analyze signal problems using Fourier Transform.
5. Apply z-transform in solving discrete engineering problems.
The course 21ETES302, Environmental Studies, is designed to provide students with essential knowledge about environmental issues, biodiversity, pollution, and sustainable development. Below are the course objectives, outline, and outcomes:

**Course Objectives:**
1. Provide basic knowledge about natural resources.
2. Describe the types, characteristics, structure, and functions of ecosystems.
3. Expose information about biodiversity richness and the threats to species.
4. Educate about the importance of the environment and its impact on human life.
5. Teach about the problems of overpopulation, health, hygiene, and the role of technology in addressing these issues.

**Course Outline:**
1. **Introduction:** Multidisciplinary nature, natural resources, water resources, mineral resources, food resources, energy resources, land resources, conservation of resources.
2. **Concept of an Ecosystem:** Structure and function, energy flow, ecological succession, different ecosystem types.
3. **Biodiversity:** Definition, value of biodiversity, threats to biodiversity, conservation measures.
4. **Types of Pollution:** Air, water, soil, marine, noise, thermal, nuclear hazards, solid waste management, disaster management.
5. **Environment and Human Health:** Population growth, human rights, HIV/AIDS, value education, role of information technology.

The course 21CSES303, Analog Electronic Circuits, focuses on imparting knowledge about semiconductor devices, diodes, transistors, operational amplifiers, and other analog electronic components. Below are the course objectives, outline, and outcomes:

**Course Objectives:**
1. Provide qualitative and quantitative understanding of semiconductor devices.
2. Explain the principle, operation, and characteristics of diodes and transistors.
3. Educate about common gate and circuits in analog electronics.
4. Demonstrate the working and applications of operational amplifiers.
5. Describe the simulation of amplifiers, controllers, and oscillators.

**Course Outline:**
1. **Diode:** P-N junction diode, I-V characteristics, rectifiers, Zener diodes, clamping, and clipping circuits.
2. **BJT (Bipolar Junction Transistor):** Structure, characteristics, BJT as a switch and amplifier, biasing circuits.
3. **MOSFET (Metal Oxide Field Effect Transistor):** Structure, characteristics, MOSFET as a switch and amplifier, biasing circuits.
4. **Amplifiers:** Differential amplifier, power amplifier, operational amplifier (OP-AMP), ideal vs. non-ideal OP-AMPs, analysis of OP-AMP circuits.
5. **Analog to Digital Conversion:** Hysteretic Comparator, Zero Crossing Detector, oscillators, analog circuits using OP-AMPs.

**Text Books:**
1. P. Horowitz and W. Hill, “The Art of Electronics”, Cambridge University Press, 1989.
2. Theodore F. Bogart, Jeffrey S. Beasley, Guillermo Rico, "Electronic Devices and Circuits", 6th Edition, Pearson Education India, 2004.

**References:**
1. S. Sedra and K. C. Smith, “Microelectronic Circuits”, Oxford University Press, 1998.
2. Behzad Razavi, "Design of Analog CMOS Integrated Circuits", McGraw Hill International Edition, 2001.

**Course Outcomes:**
1. Understand the characteristics of semiconductor devices like transistors.
2. Design and analyze rectifiers and other basic electronic circuits.
3. Gain knowledge about various amplifier circuits and their applications.
4. Apply fundamental concepts of MOSFETs in analog electronic circuit design.
5. Derive and design OP-AMP-based circuits for analog signal processing.
The course 21CSES304, Digital Electronics, covers a wide range of topics related to digital signals, logic operations, electronic components, and systems. Here's a detailed overview of the course objectives, outline, and outcomes:

**Course Objectives:**
1. Familiarize students with digital signals, logic operations, Boolean algebra, number systems, codes, and digital ICs (Integrated Circuits) with TTL and CMOS logic.
2. Describe the simplification of logic functions using K-map & Q-M method and design logic circuits like Multiplexers, De-multiplexers/Decoders, Adders, Subtractors, digital comparators, and parity checker/generators.
3. Demonstrate the operations of flip-flops including clocked SR, J-K, T, and D-type, shift registers, and Synchronous/Asynchronous counters.
4. Educate about ADC (Analog-to-Digital Converter) and DAC (Digital-to-Analog Converter) converters.
5. Explain the classification, characteristics, and design of memory organizations, PLD (Programmable Logic Device), CPLDs (Complex Programmable Logic Devices), and FPGAs (Field Programmable Gate Arrays).

**Course Outline:**
1. **Digital Circuits - Introduction:** Digital signals, logic operations, Boolean algebra, number systems, binary arithmetic, error-detecting codes, digital IC gates, TTL, Schottky TTL, CMOS logic, interfacing, Tri-state logic.
2. **Standard Representation for Logic Functions:** K-map representation, logic function simplification, Multiplexers, De-multiplexers/Decoders, Adders/Subtractors, ALU (Arithmetic Logic Unit), digital comparators, code converters.
3. **Flip Flops and Counters:** Bi stable latch, clocked SR flip-flop, J-K, T, D-type flip-flops, shift registers, serial/parallel converters, counters, special counter ICs, asynchronous sequential counters.
4. **ADC and DAC Converters:** Types of D/A converters, weighted resistor/converter, R-2R Ladder D/A converters, A/D converters (successive approximation, counting, dual slope), specifications, and examples of ADC/DAC ICs.
5. **Memory Organization:** Types of memories (ROM, RAM, CAM, CCD), memory organization, expanding memory size, PLDs (Programmable Logic Devices), CPLDs, FPGAs.

**Text Books:**
1. P. Jain, "Modern Digital Electronics", McGraw Hill Education, 2009.
2. M. M. Mano, "Digital Logic and Computer Design", Pearson Education India, 2016.

**References:**
1. Floyd, "Electron Devices", Pearson Asia, 5th Edition, 2013.
2. Donald P Leach, Albert Paul Malvino, Goutan Saha, "Digital Principles and Applications", 7th Edition, 2010.
3. V.K. Mehta, Rohit Mehta, "Principles of Electronics", S.Chand Publications, 2005.

**Course Outcomes:**
1. Acquire knowledge of digital signals, logic operations, and digital ICs.
2. Apply K-map & Q-M method to simplify logic and design logic circuits.
3. Demonstrate operations of flip-flops, shift registers, and counters.
4. Compare and analyze ADC and DAC converters.
5. Analyze memory classification, characteristics, and design PLDs, CPLDs & FPGAs.
The course 21CSPC305, Data Structures and Algorithms, covers fundamental concepts in data organization, algorithms, and their analysis. Below is a detailed overview of the course objectives, outline, and outcomes:

**Course Objectives:**
1. Impart basic concepts of data structures and algorithms.
2. Demonstrate the usage of stacks and queues.
3. Teach about lists, including linked lists, doubly linked lists, and circular linked lists.
4. Familiarize concepts of Trees (including binary trees, binary search trees, AVL trees) and graphs.
5. Provide understanding of searching and sorting techniques and their implementations.

**Course Outline:**
1. **Basic Terminologies and Algorithm Analysis:**
   - Elementary Data Organizations
   - Data Structure Operations: insertion, deletion, traversal
   - Analysis of Algorithms: Asymptotic Notations, Time-Space trade-off
   - Searching Techniques: Linear Search, Binary Search, complexity analysis

2. **ADT Stack and Queue:**
   - Stack operations, algorithms, and applications
   - Queue types (Simple Queue, Circular Queue, Priority Queue), operations, algorithms

3. **Linked Lists:**
   - Singly linked lists: representation, operations (traversing, searching, insertion, deletion)
   - Doubly linked lists, Circular Linked Lists: operations, algorithms, complexity analysis

4. **Trees:**
   - Basic Tree Terminologies
   - Binary Tree, Threaded Binary Tree, Binary Search Tree, AVL Tree: operations, algorithms, analysis
   - B Tree, B+ Tree: definitions, algorithms, analysis

5. **Sorting and Hashing:**
   - Sorting Algorithms: Selection Sort, Bubble Sort, Insertion Sort, Quick Sort, Merge Sort, Heap Sort
   - Performance and Comparison of sorting methods
   - Hashing
   - Graphs: Basic Terminologies, Representations, Graph search algorithms, complexity analysis

**Text Books:**
1. Ellis Horowitz, Sartaj Sahni, "Fundamentals of Data Structures", Computer Science Press, 1983.
2. Mark Allen Weiss, "Algorithms, Data Structures, and Problem Solving with C++", Addison-Wesley Publishing Company, 4th Edition, 2014.

**References:**
1. RS Salaria, "Data Structures", Khanna Publishing House, 5th edition, 2017.
2. Yashwant Kanetkar, "Data Structures through C", BPB Publications, 2nd edition, 2009.
3. RB Patel, "Expert Data Structures with C++", Khanna Publications, 2nd edition, 2012.

**Course Outcomes:**
1. Understand basic data structure operations and analyze algorithm complexity.
2. Develop algorithms using stacks, queues, and linked lists.
3. Implement and analyze operations on trees and graphs.
4. Compare sorting algorithm performance in terms of time and space complexity.
5. Apply hashing techniques and understand graph traversal algorithms.
21CSPC306

OBJECT ORIENTED PROGRAMMING

HAND BOOK - R2021

L
3

T
1

P
0

C
4

Course Objectives:
 To introduce the basic concepts of object-oriented programming approaches and its
features.
 To prepare the students to write program solve mathematical and scientific problems using
functions and overloading of functions
 To make the student to learn the advance features of inheritance and virtual function
 To impart knowledge on object oriented programming concepts using java advanced
features.
 To train the student to develop application program using multi-threading and multitasking
concept.
UNIT – I Introduction
Traditional Versus Object Orientation Approach – Benefits and applications of OOP –
Characteristics of Object Oriented Programming Languages- C++ Programming Basics:
Overview–C++ Data Types–Basics of object and class in C++ – Program structure– Member
Functions and Member Variable – Techniques for Creating and Initializing Objects –Data
Hiding – Namespace– Identifiers– Variables– Constants– Operators– Typecasting– Control
structures– Loops and Decisions.
UNIT - II Member Functions and Overloading
Constructors and their types – Destructor – Access specifiers : Private Public and Protected
members. C++ Functions: Simple functions- Arguments passed by value and by referenceOverloading of functions – Constructor Overloading-Inline functions - Passing and returning of
objects- friend function - Friend Classes - Static Functions - Operator Overloading:
Overloading Unary Operators- Overloading Binary Operators - Data Conversion: Conversions
Between Objects and Basic Types -Conversions Between Objects of Different Classes.
UNIT – III Inheritance
Concept of Inheritance –Types of Inheritance: Single –Multiple – Multilevel – Hierarchical –
Hybrid – Virtual Functions: Normal Member Functions Accessed with Pointers – Virtual
Member Functions Accessed with Pointers – Abstract Classes and Pure Virtual Functions –
Virtual Destructors –Virtual Base Classes – THIS Pointer.
UNIT – IV OOP in Java
Characteristics of Java - The Java Environment -Java Source File -Structure – CompilationFundamental Programming Structures in Java -Defining classes in Java –constructors- method
access specifiers - Packages - Interfaces -defining an Interface- implementing interface differences between classes and interfaces and extending interfaces-packages.
ANNAMALAI UNIVERSITY

61

FEAT

B.E. ( COMPUTER SCIENCE AND ENGINEERING)

HAND BOOK - R2021

UNIT – V Threads
Differences between multi-threading and multitasking, thread life cycle, creating threads,
synchronizing threads, Inter-thread communication, daemon threads, thread groups.
Text Books :
1. Robert Lafore, "Object -Oriented Programming in C++", Sams Publication, 4 th

edition,2002.
2. Balaguruswamy. E, “Programming with Java”, Tata McGraw - Hill Publication, 5th

edition,2014.
References :
1. Balaguruswamy.E, “Object Oriented Programming with C++”, Tata McGraw- Hill
th

Publication,6 edition,2013.
2. R.S.Salaria,“Mastering Object- Oriented
Publishing, N.Delhi,6th edition, 2016.

Programming with

C++”,Khanna

Book

st

3. D.Samantha, ”Object Oriented Programming in C++ and Java”,PHI,1 edition,2004.
st

4. Tanweer Alam,“Internet and Java Programming”,KhannaPublishingHouse,1 edition,2012.

Course Outcomes:
At the end of this course, the students will be able to
1. Understand the basic concepts of Object oriented programming, data hiding, class and
object concepts/
2. Apply the concept of argument passing through function, operator overloading, function
overloading, constructor and destructor function
3. Construct C++ program using inheritance concepts and virtual function
4. Develop Java applications using constructors, method access specifiers, Packages and
Interfaces.
5. Build Java applications using multithreading and exception handling concepts.
**21CSSP307 - Digital Electronics Lab**

**Course Objectives:**
1. Train students to experiment and analyze the characteristics of diodes, rectifiers, transistors, oscillators, and multivibrators.
2. Develop skills in implementing digital logic design concepts including logic gates, RS/JK flip-flops, multiplexers, and demultiplexers.

**List of Exercises:**
1. Characterization of semiconductor diode.
2. Characteristics of Zener diode and its use as a voltage regulator.
3. Estimation of ripple factor and efficiency in full-wave/bridge rectifiers with and without filters.
4. Characterization of CE PNP and NPN transistors.
5. Frequency response analysis of RC-coupled amplifiers.
6. Estimation of gain and efficiency in a class B power amplifier.
7. Measurement of the output voltage frequency in an RC phase-shift oscillator.
8. Estimation of the output voltage frequency of a bistable multivibrator.
9. Verification of truth tables of AND/OR/NOT/NAND/NOR/XOR gates.
10. Reduction of variables using Karnaugh Maps (K-Maps).
11. Study and implementation of multiplexers and demultiplexers.
12. Verification of state tables of RS/JK flip-flops.

**Course Outcomes:**
1. Analyze characteristics of electronic components like diodes, rectifiers, transistors, oscillators, and multivibrators.
2. Implement digital logic circuits using various components including logic gates, flip-flops, multiplexers, and demultiplexers.
3. Demonstrate the ability to answer viva questions related to programming skills needed for solving real-world problems in Computer Science and Engineering.

**21CSCP308 - Data Structures and Algorithms Lab**

**Course Objectives:**
1. Impart knowledge on basic linear and non-linear data structures and their major operations.
2. Prepare students to write programs to solve searching and sorting algorithms.

**List of Exercises:**
1. Program to create a Stack and perform insertion and deletion operations.
2. Program to create a List and perform insert, delete, update, and reverse operations.
3. Program to create a Queue and perform insertion and deletion operations.
4. Implementation of Linear Search Algorithm.
5. Program to find an element in an array using Binary Search method (iteration and recursion).
6. Program to simulate various graph traversal techniques.
7. Program to simulate various tree traversal techniques.
8. Implementation of Binary Search Tree.
9. Simulation of Bubble sort, Quick sort, and Merge sort algorithms.

**Course Outcomes:**
1. Develop C++ programs to build basic data structures like stack, queue, and list.
2. Develop C++ programs for searching and sorting algorithms using iteration and recursion concepts.
3. Demonstrate the ability to answer viva questions related to programming skills required for solving real-world problems in Computer Science and Engineering.

**21CSCP309 - Object-Oriented Programming Lab**

**Course Objectives:**
1. Teach programs to implement data abstraction, encapsulation, data hiding, inheritance, and dynamic programming using C++.
2. Educate the concepts of interfaces, multithreading, and exceptions to develop programs in Java SDK environment.

**List of Exercises - C++ Program:**
1. Design a class with a static function to display the number of objects created.
2. Find the maximum of two numbers using a friend function.
3. Copy constructor usage to copy data from one object to another.
4. Design a class for complex numbers with operator overloading for addition and multiplication.
5. Implement inheritance with classes for students, tests, sports, and results.
6. Maintain records of persons and find the eldest using this pointer.
7. Illustrate the use of a virtual function in a class.
8. Demonstrate data conversion between objects of different classes.

**List of Exercises - Java Program:**
1. Simple Java applications: understanding references and handling strings.
2. Creation of user-defined packages and working with arrays of objects.
3. Implementing user-defined interfaces and predefined exceptions.
4. Threading concepts: creation of threads and multithreading.
5. Exception handling mechanism in Java: implementing predefined and user-defined exceptions.

**Course Outcomes:**
1. Design algorithms to implement key OOP concepts and dynamic programming using C++.
2. Apply interface, multithread, and exception concepts to develop programs in Java SDK.

**21CSBS401 - Discrete Mathematics**

**Course Objectives:**
1. Introduce the basic concepts of Mathematical Logic focusing on reasoning methods.
2. Impart knowledge about sets, relations, and their properties.
3. Provide a basic understanding of Boolean Algebra and its applications.
4. Familiarize students with general algebraic systems and their properties.
5. Illustrate graph theory and its relevance to Computer Science.

**Unit - I: Mathematical Logic**
- Propositions, Connectives, Tautology, and Contradiction.
- Equivalence of Propositions, Tautological Implication, Normal Forms.
- Theory of Inference, Rules of Inference.

**Unit - II: Set Theory and Relations**
- Set operations, Ordered pairs, Cartesian product.
- Types of relations, Operations on relations, Properties of relations.
- Equivalence classes, Partition of set, Matrix, and Graphical representation of relation.

**Unit - III: Lattice and Boolean Algebra**
- Partial ordered set, Hasse diagram, Lattices, Properties of Lattices.
- Boolean Algebra, Karnaugh map method.

**Unit - IV: Group and Group code**
- Algebraic systems, Semi groups, Monoids, Groups.
- Permutation Group, Subgroups, Coding Theory, Group codes.
- Hamming codes, Encoding, and Decoding Group codes.

**Unit - V: Graph Theory**
- Graphs, Special simple graphs, Matrix representation of graphs.
- Path cycles, Connectives, Eulerian and Hamiltonian graphs.
- Shortest path algorithms.

**Textbooks:**
1. Veerarajan T, "Discrete Mathematics with Graph Theory and Combinatorics", Tata McGraw Hill Publishing Company Ltd, 2014.
2. Discrete Mathematics and Its Applications, S. K. Chakraborty and B. K. Sarkar, Oxford, 2011.

**References:**
1. Venkataraman M K, "Discrete Mathematics", The National Publishing Company, 2008.
2. Kolman Busby Ross, "Discrete Mathematical Structures", Pearson Education Pvt Ltd, 2000.
3. Trembley J P and Manohar R P, "Discrete Mathematical Structures with Applications to Computer Science", Tata McGraw Hill Publishing Company Ltd, 2005.

**Course Outcomes:**
1. Acquire fundamental concepts in Mathematical Logic and theory of inferences.
2. Understand Set theory, Relations, and equivalence classes with matrix representation.
3. Implement Lattice theory and Boolean Algebra in circuit design.
4. Design coding and encoding group codes.
5. Understand the basic concepts of Graph theory, Eulerian and Hamiltonian graphs.
**21CSES402 - Design and Analysis of Algorithms**

**Course Objectives:**
1. Explain algorithm analysis, performance measurements, and their application domains.
2. Provide knowledge of major algorithmic strategies.
3. Understand various graph and tree algorithms.
4. Introduce computational complexity notation and theory.
5. Teach advanced algorithms in computational complexity theory.

**Unit – I: Introduction**
- Characteristics of algorithms.
- Asymptotic analysis of complexity bounds: best, average, worst-case behavior.
- Performance measurements, Time, and space trade-off.
- Analysis of recursive algorithms through recurrence relations: Substitution method, Recursion tree method, Master's theorem.

**Unit – II: Fundamental Algorithmic Strategies**
- Brute-Force, Greedy, Dynamic Programming.
- Branch-and-Bound, Backtracking methodologies.
- Illustrations for Problem-Solving: Bin Packing, Knapsack, TSP.
- Heuristics: characteristics and application domains.

**Unit – III: Graph and Tree Algorithms**
- Traversal algorithms: Depth First Search (DFS), Breadth First Search (BFS).
- Shortest path algorithms, Transitive closure, Minimum Spanning Tree.
- Topological sorting, Network Flow Algorithm.

**Unit – IV: Tractable and Intractable Problems**
- Computability of Algorithms, Computability classes: P, NP, NP-complete, NP-hard.
- Cook’s theorem, Standard NP-complete problems, Reduction techniques.

**Unit – V: Advanced Topics**
- Approximation algorithms, Randomized algorithms.
- Class of problems beyond NP – P SPACE.

**Text Books:**
1. Thomas H Cormen, Charles E Lieserson, Ronald L Rivest, and Clifford Stein, “Introduction to Algorithms”, MIT Press/McGraw-Hill, 4th Edition, 2014.
2. Gajendra Sharma, “Design & Analysis of Algorithms”, Khanna Publishing House, New Delhi, 4th edition, 2016.

**References:**
1. Jon Kleinberg and Éva Tardos, Pearson, “Algorithm Design”, 1st Edition, 2012.
2. Michael T Goodrich and Roberto Tamassia, “Algorithm Design: Foundations, Analysis, and Internet Examples”, Wiley, 3rd Edition, 2009.
3. S. Sridhar, “Design & Analysis of Algorithms”, Oxford, 1st edition, 2014.

**Course Outcomes:**
1. Analyze algorithm complexity based on asymptotic analysis and justify correctness.
2. Develop algorithms using design paradigms: divide-and-conquer, dynamic programming, greedy, and backtracking.
3. Design algorithms for engineering problems using graphs and trees.
4. Compare tractable and intractable problems.
5. Describe advanced algorithms in computational complexity theory.
**21CSPC403 - Database Management System**

**Course Objectives:**
1. Understand DBMS fundamentals and E-R Diagrams.
2. Impart concepts of the Relational model and SQL.
3. Disseminate knowledge on various Normal Forms.
4. Inculcate fundamentals of transaction management and Query processing.
5. Familiarize with current trends in database technologies.

**Unit – I: Introduction**
- File System vs. DBMS.
- Views of data, Data Models.
- Database Languages, DBMS Services.
- Data Dictionary, Entity-Relationship (E-R) Model.
- Enhanced Entity Relationship Model.

**Unit – II: Relational Approach**
- Relational Model, Data Structure, Integrity.
- Domain Constraints, Entity Integrity, Referential Integrity.
- Operational Constraints, Relational Algebra, Calculus.
- SQL, Basic Structure, Set Operations, Aggregate Functions.
- Null values, Nested Subqueries, Derived Relations, Views.
- Modification, Joins, Data Definition Language, Triggers.

**Unit – III: Database Design**
- Functional Dependencies, Pitfalls in Design, Decomposition.
- Normalization using Functional Dependencies, Multi-valued Dependencies, Join Dependencies.
- Domain-Key Normal Form.

**Unit – IV: Query Processing and Transaction Management**
- Query Processing Overview, Cost Estimation, Join Strategies.
- Transaction Processing, Concepts, States, Atomicity, Durability.
- Concurrent Executions, Serializability, Isolation Implementation.
- Concurrency Control, Lock Based Protocols, Timestamp Based Protocols.

**Unit – V: Trends in Database Technologies**
- Distributed Databases, Homogeneous and Heterogeneous Databases.
- Distributed Data Storage, Transactions, Commit Protocols.
- Concurrency Control, Availability, Distributed Query Processing.
- Cloud-Based Databases, Directory Systems.

**Text Books:**
1. Abraham Silberschatz, Henry F. Korth, S. Sudharshan, “Database System Concepts”, Tata McGraw Hill, Sixth Edition, 2010.
2. Ramez Elmasri, Shamkant B. Navathe, “Fundamentals of Database Systems”, Addison Wesley, Sixth Edition, 2010.

**References:**
1. Raghu Ramakrishnan, Johannes Gehrke “Database Management Systems”, McGraw Hill, Third Edition, 2002.
2. Peter Rob and Carlos Coronel, “Database Systems – Design, Implementation and Management”, Thompson Learning, Course Technology, Seventh Edition, 2006.
3. C. J. Date, A.Kannan, S.Swamynathan , “An Introduction to Database Systems”, Addison Wesley, 8th Edition, 2012.
4. Database Management Systems, R.P. Mahapatra & Govind Verma, Khanna Publishing House, 2013.

**Course Outcomes:**
1. Understand DBMS fundamentals, Entity Relationship Model, and ER Models development.
2. Build SQL Queries for data creation and manipulation operations.
3. Apply concepts of functional dependencies and normalization to database normalization.
4. Identify Query processing and Transaction management issues in DBMS.
5. Analyze modern database technology trends in data storage, query processing, and concurrency control.
**21CSPC404 - Operating Systems**

**Course Objectives:**
1. Explain basic operating system concepts and perform a case study on UNIX and WINDOWS OS.
2. Introduce process, Threads, and process scheduling concepts.
3. Teach Critical Section, semaphores, IPC, and deadlock handling.
4. Describe memory management techniques.
5. Provide an overview of I/O hardware, I/O software, file management, and directories management.

**Unit – I: Introduction**
- Operating Systems: Concepts, Generations, Types, Services.
- System Calls, OS Structure (Layered, Monolithic, Microkernel).
- Virtual Machine, Case study: UNIX and WINDOWS OS.

**Unit – II: Processes and Scheduling**
- Process: Definition, States, PCB, Context switching.
- Threads: Definition, States, Types, Multithreading benefits.
- Process Scheduling: Objectives, Types of Schedulers, Scheduling criteria, Algorithms (FCFS, SJF, RR, etc.).
- Multiprocessor scheduling, Real-Time scheduling.

**Unit – III: Inter-Process Communications**
- Critical Section, Race Conditions, Mutual Exclusion.
- IPC: Semaphores, Event Counters, Monitors, Message Passing.
- Classical IPC Problems, Deadlocks: Prevention, Avoidance, Detection, Recovery.

**Unit – IV: Memory Management**
- Logical and Physical address mapping, Memory allocation.
- Contiguous Memory allocation, Fragmentation, Compaction.
- Paging, Virtual Memory, Page Replacement algorithms (FIFO, LRU, etc.).

**Unit – V: File and Directories**
- I/O Hardware, I/O devices, Direct memory access.
- Disk Structure, Disk scheduling algorithms.
- File Management: Concepts, Types, Operations, Directory structure, File System structure, Allocation methods.
- Disk Management: Disk scheduling, Reliability, Formatting, Bad blocks.

**Text Books:**
1. Silberschatz, Galvin, and Gagne, “Operating System Concepts”, Wiley India Pvt Ltd, 9th Edition 2013.
2. William Stallings, “Operating Systems – internals and design principles”, Prentice Hall, 7th Edition, 2011.

**References:**
1. Charles Crowley, “Operating System: A Design-oriented Approach”, 1st Edition Irwin Publishing, 1996.
2. Maurice Bach, “Design of the Unix Operating Systems”, 8th Edition Prentice - Hall of India, 2011.
3. Ekta Walia, “Operating Systems”, Khanna Publishing House, Delhi, 2nd edition, 2010.
4. Dhananjay M. Dhamdhere, “Operating Systems A Concept - Based Approach”, McGraw Hill, 1st edition, 2008.

**Course Outcomes:**
1. Explain types of operating systems and perform a case study on UNIX and WINDOWS OS.
2. Understand process concepts, Threads, and compare process scheduling algorithms.
3. Illustrate Critical Section, semaphores, IPC, and use Bankers algorithm for deadlock detection.
4. Summarize memory management techniques and select appropriate page replacement algorithms.
5. Discuss I/O hardware, I/O software, file, and directories management, and develop disk scheduling algorithms.

**21CSPC405 - Python Programming**

**Course Objectives:**
1. Familiarize students with data types, variables, operators, conditionals, and looping in Python.
2. Provide in-depth knowledge and understanding of Functions.
3. Help students understand the fundamentals of Classes and Objects in Python.
4. Impart knowledge about File handling, networking, Database Management, and GUI Programming in Python.

**Unit – I: Introduction**
- History of Python, Programming Style, Simple Program Structure.
- Identifiers, Variables, Assignment Statements, Expressions, Constants.
- Numeric Data Types, Operators, Type Conversions.
- Conditional Statements (if, if-else, nested if), Logical Operators, Conditional Expressions.
- Loops (while, for), Loop Control Statements (break, continue).
- Case Studies: Computing Body Mass Index, Displaying Prime Numbers, Random Walk.

**Unit - II: Python Function**
- Mathematical Functions, Strings, User Defined Functions.
- Python Built-in Functions, String Manipulation, Formatting.
- Function Definition, Calling Functions, Arguments, Return Values.
- Scope of Variables, Default Arguments, Modularizing Code.
- Function Abstraction, Stepwise Refinement, Case Study: Generating Random ASCII Characters.

**Unit - III: Class and Object**
- Object-Oriented Programming (OOP) Principles in Python.
- Class Definition, Inheritance, Composition, Operator Overloading.
- Python Object System, Object Representation, Memory Management.
- Special Class Properties: Properties, Slots, Private Attributes.

**Unit - IV: Files and Exception Handling**
- File Handling, Exception Handling, Network Programming.
- Text Input/Output, File Dialogs, Exception Handling (try-except, raise).
- Custom Exception Classes, Binary IO Using Pickling, Networking with Sockets.
- Client-Server Architecture, FTP, Emails, Exception Handling Strategies.

**Unit - V: Database and GUI**
- Database Programming (DBM, SQL), GUI Programming using Tkinter.
- Tkinter Introduction, Widget Classes, Events Processing.
- Canvas, Geometry Managers, Displaying Images, Menus, Dialog Boxes.
- Mouse, Key Events, Bindings, List boxes, Animations, Scrollbars.

**Text Books:**
1. Mark Lutz, “Learning Python, Powerful OOPs”, O’Reilly, 2011.
2. Guttag, John, “Introduction to Computation and Programming Using Python”, MIT Press, 2013.

**References:**
1. Jennifer Campbell et al., “Practical Programming An Introduction To Computer Science Using Python”, The Pragmatic Bookshelf, 2009.
2. Wesley J Chun, “Core Python Applications Programming”, Prentice Hall, 2012.
3. Jeeva Jose, “Taming Python by Programming”, Khanna Publishing House, 1st edition, 2017.
4. J.Jose, “Introduction to Computing and Problem Solving with Python”, Khanna Publications, 1st edition, 2015.
5. Reema Thareja, “Python Programming”, Pearson, 1st edition, 2017.

**Course Outcomes:**
1. Understand basic programming concepts in Python including conditionals and looping.
2. Develop modular programs using Functions and Modules.
3. Apply Object-Oriented Programming concepts like encapsulation, inheritance, and polymorphism in Python.
4. Implement file handling operations, networking, and communication between systems.
5. Develop GUI applications with menu-driven interfaces, store and retrieve data from databases.
**21CSPC406 - Computer Organization and Architecture**

**Course Objectives:**
1. Introduce the concepts of Bus structure and functional units of a Computer.
2. Familiarize students with the working of ALU, its structure, and functions.
3. Impart knowledge on hierarchical memory systems including cache memories and virtual memory.
4. Describe the significance of Semiconductor RAM and ROM memories in computers.
5. Teach the concept of parallel processing in computers.

**Unit – I: Introduction**
- Functional Units, Bus Structures, Performance Metrics.
- Instructions, Instruction Sequencing, Instruction Set Architecture.
- Addressing Modes, RISC vs. CISC architectures.

**Unit – II: Fundamental Concepts**
- ALU Design, Execution of Instructions.
- Multiple Bus Organization, Hardwired Control, Microprogrammed Control.

**Unit – III: Memory**
- Semiconductor RAM and ROM, Cache Memories.
- Virtual Memory, Memory Management, Associative Memories.
- Secondary Storage Devices.

**Unit – IV: I/O Devices**
- Accessing I/O devices, Programmed I/O, Interrupts.
- Direct Memory Access (DMA), Buses, Interface Circuits.
- Standard I/O interfaces (PCI, SCSI, USB), I/O Devices, and processors.

**Unit - V: Parallel Processing**
- Concept of Parallel Processing, Pipelining.
- Forms of Parallel Processing, Interconnect Networks.
- Data Hazards, Instruction Hazards, Influence on Instruction Sets.
- Data Path and Control Considerations, Performance Considerations.

**Text Books:**
1. Carl Hamacher, Zvonko Vranesic, Safwat Zaky, “Computer Organization”, McGraw-Hill, 5th edition, Reprint 2012.
2. David A. Patterson and John L. Hennessy, “Computer Architecture-A Quantitative Approach”, Elsevier, 5th edition, 2012.

**References:**
1. William Stallings, “Computer Organization and Architecture – Designing for Performance”, 6th Edition, Pearson Education, 2003.
2. Hayes, J.P., “Computer Architecture and Organization”, 3rd Edition, Tata McGraw-Hill, 1998.
3. Ghosh T. K., “Computer Organization and Architecture”, Tata McGraw-Hill, 3rd edition, 2011.
4. Behrooz Parahami, “Computer Architecture”, Oxford University Press, 8th Impression, 2011.
5. Heuring, V.P. and Jordan, H.F., “Computer Systems Design And Architecture”, 2nd edition, Pearson Education, 2004.

**Course Outcomes:**
1. Understand the functional units of a computer, bus organizations, and addressing modes.
2. Compare and Contrast Hardwired control and Microprogrammed control.
3. Analyze RAM, ROM, Cache memory, and virtual memory concepts.
4. Identify various I/O interfaces used for communication with computers.
5. Recognize the concept of parallel processing and Pipelining in Computers.
**21ETHS407 - Universal Human Values**

**Course Objectives:**
1. Develop a holistic perspective through self-exploration regarding human beings, family, society, and nature.
2. Understand or develop clarity about harmony in human relationships, family dynamics, societal structures, and nature.
3. Strengthen self-reflection abilities.
4. Develop commitment and courage to act based on understanding of human values.

**Unit-I: Course Introduction**
- Purpose and motivation for the course.
- Self-exploration: content, process, natural acceptance, and experiential validation.
- Understanding basic human aspirations and fulfillment.
- Importance of right understanding, relationships, and physical facilities.

**Unit-II: Harmony in the Human Being**
- Co-existence of the sentient 'I' and the material 'Body'.
- Understanding needs of self and body, harmony between 'I' and body.
- Programs for maintaining health and balance.

**Unit-III: Harmony in Family and Society**
- Values in human relationships: justice, trust, respect.
- Foundation values of relationships: trust and respect.
- Harmony in societal structures: resolution, prosperity, fearlessness, co-existence.
- Visualizing universal harmonious order.

**Unit-IV: Harmony in Nature and Existence**
- Understanding harmony in nature: interconnectedness, mutual fulfillment, self-regulation.
- Holistic perception of harmony at all levels of existence.

**Unit-V: Implications on Professional Ethics**
- Natural acceptance of human values.
- Definitiveness of ethical human conduct.
- Competence in professional ethics and responsible engineering/management practices.
- Case studies and strategies for transition towards a universal human order.

**Text Book:**
1. Human Values and Professional Ethics by R R Gaur, R Sangal, G P Bagaria, Excel Books, New Delhi, 2010.

**References:**
1. Jeevan Vidya: Ek Parichaya, A Nagaraj, Jeevan Vidya Prakashan, Amarkantak, 1999.
2. The Story of Stuff (Book).
3. The Story of My Experiments with Truth - by Mohandas Karamchand Gandhi.

**Course Outcomes:**
1. Increased awareness of self and surroundings, leading to responsible behavior and sustainable solutions.
2. Enhanced critical thinking abilities.
3. Sensitivity towards human values and relationships, with a commitment to applying learned concepts in real-life situations.
4. Foundation for continued learning and application of human values in various life aspects.
**21CSCP408 - Database Management Systems Lab**

**Course Objectives:**
1. Build and populate a sample database using Data Definition Language (DDL) and Data Manipulation Language (DML) commands of Structured Query Language (SQL).
2. Develop PL/SQL functions, procedures, and packages applicable to a sample database.

**List of Exercises:**
1. Implementation of queries for a student database.
2. Data Definition Language - with constraints and without constraints.
3. Data Manipulation Language - Insert, Delete, Update, Select, and Truncate operations.
4. Transaction Control Statements - Commit, Savepoint, Rollback.
5. Data Control Statements - Grant, Revoke.
6. Data Projection Statements - Multi-column selections, alias names, arithmetic operations, Distinct records, concatenation, Where clause.
7. Data Selection Statements - Between, And, Not In, Like, relational and logical operators.
8. Aggregate functions - Count, Maximum, Minimum, Sum, Average, Order By, Group By, Having.
9. Joint Queries - Inner Join, Outer Join, Self Join, Cartesian Join, or Cross Join.
10. Subqueries - In, Not In, Some, Any, All, Exist, Not Exist.
11. Set Operations - Union, Union All, Intersect, Minus.
12. Database Objects - Synonym, Sequences, Views, Index.
13. Cursor operations.
14. Functions and procedures development in PL/SQL.
15. Trigger implementation.
16. Exception handling in PL/SQL.
17. Packages creation and usage.
18. Implementing factorial calculation for a number.
19. Checking whether a number is prime or not.
20. Generating Fibonacci series.

**Course Outcomes:**
1. Ability to create and manipulate databases using SQL commands and queries.
2. Proficiency in developing PL/SQL functions, procedures, and packages for database operations.
3. Capability to answer viva questions and solve real-world problems related to database management and programming skills in Computer Science and Engineering.

**21CSCP409 - Operating Systems Lab**

**Course Objectives:**
1. Prepare students to write C programs to understand operating system concepts.
2. Impart programming skills in shell scripting.

**List of Exercises:**
1. Job scheduling techniques in C.
2. Disk scheduling techniques in C.
3. Memory allocation techniques in C.
4. Memory management techniques in C.
5. Page replacement techniques in C.
6. Producer-consumer problem in C.
7. Banker's algorithm in C.
8. Dining Philosophers problem in C.
9. Shell script for file operations using UNIX commands.
10. Shell script for basic UNIX utilities operations.
11. Shell script for arranging 'n' numbers using awk.
12. Shell script for nCr calculation using recursion.
13. Shell script for sorting numbers and alphabetic from a text file using awk.
14. Shell script to display files accessed in the last 10 days and list files based on block size.
15. Shell script to display numbers between 1 and 9999 in words.
16. Shell script for Palindrome Checking.

**Course Outcomes:**
1. Ability to develop C programs for various operating system concepts and synchronization problems.
2. Proficiency in writing shell scripts for Unix commands and utilities.
3. Capability to answer viva questions and solve real-world problems related to programming skills in Computer Science and Engineering.
**21CSCP410 - Python Programming Lab**

**Course Objectives:**
1. Develop Python programs for various programming tasks.
2. Impart programming skills for different applications using Python.

**List of Exercises:**
1. Check if a Number is Positive, Negative or Zero.
2. Check prime numbers.
3. Check Armstrong Number.
4. Solve Quadratic Equation.
5. Transpose a Matrix.
6. Find the Size (Resolution) of an Image.
7. Display the Multiplication Table using a FOR loop.
8. Find ASCII Value of a Character.
9. Convert Decimal to Binary, Octal, and Hexadecimal.
10. Swap Two Variables Using a Function.
11. Display Fibonacci sequence Using Recursion.
12. Shuffle Deck of Cards.
13. Merge Mails.
14. Find Hash of a File.
15. Root search.
16. Solve initial value problem using 4th order Runge-Kutta method.

**Course Outcomes:**
1. Solve Python programs and understand Object-Oriented programming concepts.
2. Develop real-time applications using Python.
3. Demonstrate programming skills needed for solving real-world problems in Computer Science and Engineering.
**21CSCP410 - Python Programming Lab**

**Course Objectives:**
1. Develop Python programs for various programming tasks.
2. Impart programming skills for different applications using Python.

**List of Exercises:**
1. Check if a Number is Positive, Negative or Zero.
2. Check prime numbers.
3. Check Armstrong Number.
4. Solve Quadratic Equation.
5. Transpose a Matrix.
6. Find the Size (Resolution) of an Image.
7. Display the Multiplication Table using a FOR loop.
8. Find ASCII Value of a Character.
9. Convert Decimal to Binary, Octal, and Hexadecimal.
10. Swap Two Variables Using a Function.
11. Display Fibonacci sequence Using Recursion.
12. Shuffle Deck of Cards.
13. Merge Mails.
14. Find Hash of a File.
15. Root search.
16. Solve initial value problem using 4th order Runge-Kutta method.

**Course Outcomes:**
1. Solve Python programs and understand Object-Oriented programming concepts.
2. Develop real-time applications using Python.
3. Demonstrate programming skills needed for solving real-world problems in Computer Science and Engineering.

**Mapping of Course Outcomes with Programme Outcomes:**
- CO1: Ability to solve simple and advanced Python programs.
- CO2: Understanding of Object-Oriented programming concepts.
- CO3: Development of real-time applications using Python.
**21CSPC502 COMPUTER GRAPHICS AND MULTIMEDIA**

**Course Objectives:**
1. Educate the basics of graphics system and algorithms to implement graphics primitives.
2. Provide knowledge about 2D transformations and clipping techniques.
3. Impart knowledge about 3D transformations and OpenGL programming.
4. Make students understand various aspects of multimedia.
5. Impart knowledge on the concept of sound, images, and videos.

**UNIT- I Introduction**
- Overview of Graphics System
- Coordinate Representation
- Graphics Output Primitives
- Attributes of Graphics Primitives
- Implementation Algorithms for Graphics Primitives
- Introduction to OpenGL
- OpenGL functions for Graphics Primitives.

**UNIT- II 2D Concepts**
- 2D Transformations
- 2D Viewing
- Window Viewport Transformation
- Line, Polygon, Curve, and Text Clipping Algorithms
- OpenGL Functions for 2D Transformations and 2D Viewing.

**UNIT- III 3D Concepts**
- 3D Transformations
- 3D Viewing
- 3D Object Representations
- Spline Representation
- Visible Surface Detection Methods
- Color Models
- OpenGL Functions for 3D Transformations and 3D Viewing.

**UNIT- IV Multimedia Systems Design**
- Multimedia Basics
- Multimedia Applications
- Multimedia System Architecture
- Evolving Technologies for Multimedia
- Defining Objects for Multimedia Systems
- Multimedia Data Interface Standards
- Multimedia Databases.

**UNIT- V Multimedia File Handling and Hypermedia**
- Compression and Decompression
- Data and File Format Standards
- Multimedia I/O Technologies
- Digital Voice and Audio
- Video Image and Animation
- Full Motion Video
- Storage and Retrieval Technologies
- Multimedia Authoring and User Interface
- Hypermedia Messaging.

**Text Books:**
1. Donald D. Hearn, M. Pauline Baker, and Warren Carithers, “Computer Graphics with OpenGL”, Fourth Edition, Pearson Education, 2010.
2. Andleigh, P. K and Kiran Thakrar, “Multimedia Systems and Design”, PHI, 2003.

**References:**
1. Francis S Hill Jr. and Stephen M Kelley, “Computer Graphics Using OpenGL”, 3rd Edition, Prentice Hall, 2007.
2. Foley, Vandam, Feiner, and Hughes, “Computer Graphics: Principles and Practice”, 2nd Edition, Pearson Education, 2003.
3. Ralf Steinmetz and Klara Steinmetz, "Multimedia Computing, communications, and Applications", Pearson Education, 2004.
4. Judith Jeffcoate, “Multimedia in practice: Technology and Applications”, PHI, 1998.

**Course Outcomes:**
1. Understand and use OpenGL functions to create interactive Computer graphics structures.
2. Design and apply OpenGL functions to two-dimensional graphics, transformations, and clipping algorithms.
3. Design and apply OpenGL functions to three-dimensional graphics, transformation, and apply color models to graph systems.
4. Analyze and apply design strategies to multimedia systems and multimedia databases.
5. Develop animation projects from concepts of audio, image, video, and hypermedia messaging.
**21CSCP503 COMPUTER NETWORKS**

**Course Objectives:**
1. Impart knowledge on layered approach for designing, implementing, and operating extensive networks.
2. Teach components required to build networks.
3. Provide basic concepts related to network addressing and routing.
4. Help students understand concepts of end-to-end flow of information and congestion control.
5. Familiarize with concepts of electronic mail, HTTP, DNS, and SNMP.

**UNIT-I Data Communication Components**
- Representation of data and its flow in networks
- Various connection topologies
- Protocols and standards
- OSI model
- Transmission media
- LAN: Wired and wireless LANs
- Techniques for bandwidth utilization: Multiplexing - Frequency division, Time division, Wave division
- Concepts on spread spectrum

**UNIT-II Data Link Layer and Medium Access Sub Layer**
- Error detection and error correction
- Flow control and error control protocols
- Multiple access protocols: Pure ALOHA, Slotted ALOHA, CSMA/CD, CDMA/CA

**UNIT-III Network Layer**
- Switching
- Logical addressing – IPV4, IPV6
- Address mapping – ARP, RARP, BOOTP, DHCP
- Delivery, Forwarding, and Unicast Routing protocols

**UNIT-IV Transport Layer and Application Layer**
- Process to Process Communication
- User Datagram Protocol (UDP)
- Transmission Control Protocol (TCP)
- SCTP Congestion Control
- Quality of service (QoS) improving techniques
- Application Layer: DNS, TELNET, EMAIL, FTP, WWW, HTTP, SNMP, Bluetooth, Firewalls, Cryptography basics

**UNIT-V Services Mechanism**
- Attacks and security architectures
- Network security model
- Classical Encryption techniques
- Finite Fields And Number Theory
- Discrete logarithms
- Testing for primality
- The Chinese remainder theorem

**Text Books:**
1. Data and Computer Communication, 10th Edition, William Stallings, Pearson Prentice Hall India, 2013.
2. Cryptography and Network Security: 5th Edition, William Stallings, Principles and Practice, PHI, 2006.

**References:**
1. Data Communication and Networking, 4th Edition, Behrouz A. Forouzan, McGraw-Hill.
2. Computer Networks, 8th Edition, Andrew S. Tanenbaum, Pearson New International Edition.
3. Computer Networks, M. Dave, Cengage Learning India, 1st Edition, 2012.

**Course Outcomes:**
1. Understand the functions of layering and protocols in computer networks.
2. Summarize devices, protocols, and standards for network design.
3. Construct and implement switching and routing concepts.
4. Select appropriate protocols and techniques for maintaining consistent information flow.
5. Illustrate the functions of electronic mail, HTTP, DNS, and SNMP in network operations.
**21CSPC504 MICROPROCESSORS**

**Course Objectives:**
1. Familiarize with the architecture of 8086 microprocessor including stacks, procedures, interrupts, and instruction set.
2. Impart knowledge on 8086, 80186, 80286, 80386, 80486, and Pentium processors.
3. Demonstrate memory interfacing and I/O interfacing with case studies.
4. Explain the architecture of 8031/8051 and 16-bit controller.
5. Analyze the role of 8051 microcontroller in ADC, DAC, Stepper Motor, and Waveform generation.

**UNIT-I Introduction to 8086**
- Microprocessor architecture
- Addressing modes
- Instruction set and assembler directives
- Assembly language programming
- Modular Programming
- Stacks, Procedures, Macros
- Interrupts and interrupt service routines
- Byte and String Manipulation

**UNIT-II 8086 Processor**
- 8086 Architecture
- Basic Configuration
- Minimum and Maximum mode configurations
- IO programming
- System Bus Structure
- Interrupts
- Introduction to other processors like 80186, 80286, 80386, 80486, and Pentium

**UNIT-III Interfacing**
- Memory Interfacing
- I/O interfacing
- Parallel and Serial communication interface
- D/A and A/D Interface
- Timer, Keyboard/display controller
- Interrupt controller, DMA controller
- Case studies: Traffic Light control, LED display, LCD display, Keyboard display interface, Alarm Controller

**UNIT-IV Microcontroller**
- Architecture of 8031/8051
- Special Function Registers (SFRs)
- I/O Pins Ports and Circuits
- Instruction set
- Assembly language programming
- Introduction to 16-bit Microcontroller

**UNIT-V Advanced Topics**
- Programming 8051 Timers
- Serial Port Programming
- Interrupts Programming
- LCD & Keyboard Interfacing
- ADC, DAC & Sensor Interfacing
- External Memory Interface
- Stepper Motor and Waveform generation

**Text Books:**
1. Yu-Cheng Liu, Glenn A. Gibson, "Microcomputer Systems: The 8086/8088 Family – Architecture, Programming, and Design", Prentice Hall of India, 2nd Edition, 2007.
2. Muhammed Ali Mazidi, Janice Gillispie Mazidi, Rolin McKinlay, "The 8051 Microcontroller and Embedded Systems: Using Assembly and C", Pearson Education, 2nd Edition, 2011.

**References:**
1. Doughlas V. Hall, "Microprocessors and Interfacing, Programming, and Hardware", TMH, 2012.
2. Ramesh S. Gaonkar, "Microprocessor Architecture Programming and Applications with 8085", Penram International Publishing, 4th Edition, 2000.
3. Kenneth J. Ayala., "The 8051 Microcontroller Architecture Programming and Applications", Penram International Publishing (India), 1996.

**Course Outcomes:**
1. Acquire basic knowledge of 8086 microprocessor architecture, addressing modes, instruction set, etc.
2. Develop programming skills for 8086 and understand other microprocessors.
3. Design and develop various applications using memory and I/O interfacing.
4. Gain programming knowledge on 8031/8051 microcontroller and 16-bit Microcontroller.
5. Implement programs for various functionalities using microcontrollers.
**21CSCP507 COMPUTER GRAPHICS AND MULTIMEDIA LAB**

**Course Objectives:**
1. Provide knowledge on implementation of 2D and 3D shape drawing algorithms, transformations, and their applications.
2. Demonstrate various aspects of image, sound, and video editing tools such as GIMP, Audacity, Windows Movie Maker, Swish, Flash, etc.

**LIST OF EXERCISES:**
1. Implementation of Bresenham’s Algorithm – Line and Circle.
2. Implementation of Bresenham’s Algorithm – Ellipse.
3. Implementation of Line, Circle, and Ellipse attributes.
4. Two-Dimensional transformations - Translation, Rotation, Scaling, Reflection, Shear.
5. Cohen Sutherland 2D line clipping and Windowing.
6. Sutherland – Hodgeman Polygon clipping Algorithm.
7. Three-dimensional transformations - Translation, Rotation, Scaling.
8. Drawing three-dimensional objects and Scenes.
9. Line DDA, chain of diamonds, chessboard.
10. Generating Fractal images.
11. GIMP:
    - Creating Logos.
    - Simple Text Animation.
12. Audacity:
    - Silencing, Trimming, and Duplicating the Audio Signal.
    - Giving the Advanced Effect to the Audio Signal.
13. Windows Movie Maker:
    - Applying Effect to Video.
    - Creating Titles in Video.
14. Swish:
    - Text Effects.
    - Pre-Loader.
15. Flash:
    - Changing the shape of the Object.
    - Image Viewing using Mask.
16. Photo Impact:
    - Text Effects.
    - Image Slicing.

**Course Outcomes:**
1. Implement 2D and 3D shape drawing algorithms, transformations, and their applications.
2. Develop applications on image, sound, and video using editing tools such as GIMP, Audacity, Windows Movie Maker, Swish, Flash, etc.
3. Demonstrate an ability to listen and answer viva questions related to programming skills needed for solving real-world problems in Computer Science and Engineering.
**21CSCP509 MICROPROCESSORS LAB**

**Course Objectives:**
1. Prepare students to write assembly language programs on 8085 and 8086 microprocessors.
2. Impart design/programming skills on microprocessor interfacing applications.

**LIST OF EXERCISES:**
1. Study of 8085 and study of 8086 microprocessor.
2. 8-bit Arithmetic Operation.
3. 16-bit Arithmetic Operation.
4. Find the number of even and odd numbers in a block of data.
5. Fibonacci series.
6. Hexadecimal to binary conversion.
7. Matrix Addition.
8. Sorting an array of numbers.
9. Searching a string.
10. Digital clock.
11. Square wave generation using 8253IC.
12. Stepper motor interface using 8255IC.
13. Data transfer using USART.
14. Keyboard status.
15. Message display using 8279IC.
16. Simulation of traffic light control signal.

**Course Outcomes:**
1. Develop Assembly language programs for solving simple mathematical problems.
2. Design and experiment with microprocessor interfacing applications using 8253IC, 8255IC, USART, 8279IC, and traffic light control system.
3. Demonstrate an ability to listen and answer viva questions related to programming skills needed for solving real-world problems in Computer Science and Engineering.
**21CSPC601 COMPILER DESIGN**

**Course Objectives:**
1. Understand and list the different stages in the process of compilation.
2. Identify different methods of lexical analysis.
3. Design top-down and bottom-up parsers.
4. Identify synthesized and inherited attributes.
5. Develop algorithms to generate code for a target machine.

**UNIT – I Introduction to Compilers**
- Basics of Programming Languages
- Language processors: Compilation and Interpretation
- Phases of Compiler: Lexical analysis, Syntax analysis, Semantic analysis, Code generation, and Code optimization
- Compiler Construction Tools and Applications

**UNIT – II Lexical Analysis**
- Role of Lexical Analysis
- Input Buffering and Token Recognition
- Lexical Analyzer Generators like LEX
- Finite Automata, Regular Expressions, and Pattern Matching

**UNIT – III Syntax Analysis**
- Context-Free Grammars and Parsing Techniques
- Top-Down Parsing (Recursive-Descent Parsing, LL(1) Grammars)
- Bottom-Up Parsing (Shift-Reduce Parsing, LR Parsing)
- Parser Generators like YACC

**UNIT – IV Syntax-directed Translation & Run-time Environment**
- Syntax-Directed Definitions and Syntax Trees
- Bottom-Up Evaluation and Type Systems
- Run-time Environment: Storage Allocation, Heap Management, Garbage Collection

**UNIT – V Code Generation**
- Intermediate Code Generation
- Translation of Expressions, Type Checking, and Control Flow
- Code Generation Issues, Target Language, Basic Blocks, and Optimization Techniques

**Text Books:**
1. "Compilers: Principles, Techniques and Tools" by Alfred V. Aho, Monica S. Lam, Ravi Sethi, Jeffrey D. Ullman, Pearson Publishers, 2008.
2. Allen I. Holub, "Compiler Design in C", Prentice Hall of India, 2003.

**References:**
1. Henk Alblas and Albert Nymeyer, "Practice and Principles of Compiler Building with C", PHI, 2001.
2. Kenneth C. Louden, "Compiler Construction: Principles and Practice", Thompson Learning, 2003.

**Course Outcomes:**
1. Illustrate the different phases of a compiler.
2. Explain the process of lexical analysis and parsing.
3. Understand and compare top-down and bottom-up parsing principles.
4. Construct syntax trees and explain storage organization in compiler design.
5. Develop algorithms for generating intermediate code and understand optimization techniques.

**21CSPC602 SOFTWARE ENGINEERING**

**Course Objectives:**
1. Understand the basic phases of development in a Software Project.
2. Understand enterprise integration and deployment concepts, requirements engineering, and analysis modeling.
3. Learn about various testing methods and basics of Quality Management.
4. Explain Software Configuration Management.
5. Describe Risk Management in software development.

**UNIT- I Introduction to Software Process**
- Software Process Overview
- Generic Process Model
- Perspective Process Models
- Specialized Process Models
- Agile Development and Extreme Programming (XP)
- Requirements Engineering and Analysis Modeling

**UNIT- II Design Concepts**
- Design Process Overview
- Design Concepts and Models
- Architectural Design and Mapping
- Component-Level Design
- User Interface Design
- WebApp Design Quality and Interface Design

**UNIT- III Quality Management**
- Software Quality Overview
- Achieving Software Quality
- Review Techniques and Metrics
- Software Quality Assurance (SQA)
- Test Strategies and System Testing
- Debugging Techniques

**UNIT- IV Configuration Management**
- SCM Repository and Process
- Configuration Management for Web Apps
- Product Metrics and Project Management Concepts
- Metrics in Process and Project Domains

**UNIT- V Software Project Estimation**
- Estimation Techniques and Models
- Project Scheduling and Risk Management
- Business Process Reengineering and Software Reengineering
- SPI Process and CMMI

**Text Books:**
1. Roger S. Pressman, "Software Engineering – A Practitioner’s Approach", Seventh Edition, Mc Graw-Hill International Edition, 2010.
2. K.K. Aggarwal & Yogesh Singh, "Software Engineering", New Age International, 2nd edition, 2006.

**References:**
1. Ian Sommerville, "Software Engineering", 9th Edition, Pearson Education Asia, 2011.
2. Rajib Mall, "Fundamentals of Software Engineering", Third Edition, PHI Learning Private Limited, 2009.

**Course Outcomes:**
1. Understand Software Project Models.
2. Analyze Software Design Strategies.
3. Explore Software Testing Methods.
4. Learn Management Methods in Software Development.
5. Acquire Knowledge about Risk Management in Software Engineering.
**21CSCP607 COMPILER DESIGN LAB**

**Course Objectives:**
1. Understand the different stages of compiler development.
2. Develop programming skills required for compiler development.

**LIST OF EXERCISES:**
1. Implement Lexical Analyzer for IF Statement.
2. Implement Lexical Analyzer for Arithmetic Expression.
3. Construct NFA from Regular Expression.
4. Construct DFA from NFA.
5. Implement Shift Reduce Parsing Algorithm.
6. Implement Operator Precedence Parser.
7. Implement Recursive Descent Parser.
8. Implement Code Optimization Techniques.
9. Implement Code Generator.

**Course Outcomes:**
1. Apply programming knowledge and skills to design and develop a compiler.
2. Understand and implement lexical analyzer, syntax analyzer, code optimizer, and code generator.
3. Demonstrate the ability to answer viva questions related to programming skills in solving real-world problems in Computer Science and Engineering.
**21CSCP608 SOFTWARE ENGINEERING LAB**

**Course Objectives:**
1. Provide students with simple experiments to understand basic aspects of testing techniques for detecting errors in software.
2. Understand standard principles for defect detection and removal.

**LIST OF EXERCISES:**
1. Write a C program for matrix multiplication to understand causes of failures.
2. Write a C program for Binary Search – Path Testing.
3. Write a C program to derive test cases based on boundary value analysis.
4. Write a C program for cause-effect graph to check whether defects are found in the program.
5. Write a C program to perform data flow testing for the given code and find out all d-use pairs.
6. Write a C program to demonstrate the working of looping constructs.
7. Write and test a program to count the number of check boxes on the page checked and unchecked count using Selenium tool.
8. Write and test a program to provide the total number of objects available on the page using Selenium tool.
9. Write and test a program to login to a specific web page using Selenium tool.
10. Write and test a program to select the number of students who have scored more than 60 in any one subject (or all subjects).
11. Write a JavaScript to develop a web page that calculates the GCD of 2 numbers using Selenium tool.
12. Write and test a program to update 10 student records into a table in an Excel file using Selenium tool.

**Course Outcomes:**
1. Investigate reasons for bugs and analyze principles in software testing.
2. Implement various test processes for quality improvement.
3. Demonstrate the ability to answer viva questions related to programming skills needed for solving real-world problems in Computer Science and Engineering.
**21ETHS701 ENGINEERING ETHICS**

**Course Objectives:**
1. Provide basic knowledge about engineering ethics, moral issues, professional ideals, and virtues.
2. Familiarize students with responsible experimentation, research ethics, codes of ethics, and industrial standards.
3. Educate about safety and risk analysis, risk-benefit analysis, collegiality, loyalty, confidentiality, and intellectual property rights.
4. Impart knowledge about business ethics, environmental ethics, computer ethics, and moral leadership.

**Text Books:**
1. Govindarajan M, Natarajan S, and Senthilkumar V S, "Professional Ethics and Human Values", PHI Learning, New Delhi, 2013.
2. Mike Martin and Roland Schinzinger, "Ethics in Engineering", McGraw Hill, New York, 2005.

**References:**
1. Charles E Harris, Michael S Pritchard, and Michael J Rabins, "Engineering Ethics – Concepts and Cases", Thompson Learning, 2000.
2. Charles D Fleddermann, "Engineering Ethics", Prentice Hall, New Mexico, 1999.
3. John R Boatright, "Ethics and the Conduct of Business", Pearson Education, 2003.
4. Edmund G Seebauer and Robert L Barry, "Fundamentals of Ethics for Scientists and Engineers", Oxford University Press, 2001.
5. David Ermann and Michele S Shauf, "Computers, Ethics and Society", Oxford University Press, 2003.

**Course Outcomes:**
1. Understand basic concepts of engineering ethics.
2. Analyze the importance of codes of ethics in engineering practice.
3. Comprehend risk analysis in ethical decision-making.
4. Describe collegiality, loyalty, and professional responsibilities.
5. Acquire knowledge about business ethics and moral leadership in engineering.
**21CSPC702 EMBEDDED SYSTEMS AND INTERNET OF THINGS (IOT)**

**Course Objectives:**
1. Introduce basics, features, challenges, and recent trends in embedded systems.
2. Educate on real-time operating systems, ARM architecture, and development tools.
3. Teach characteristics, design, and functional blocks of IoT.
4. Explain network, communication aspects, and IoT applications.
5. Impart knowledge on building IoT with Raspberry Pi, Arduino using Python.

**Text Books:**
1. Marilyn Wolf, "Computers as Components-Principles of Embedded Computing System Design", Morgan Kaufmann Publishers, 3rd edition, 2012.
2. Vijay Madisetti, Arshdeep Bahga, "Internet of Things: A Hands-On Approach" Orient Blackswan Pvt. Ltd., New Delhi, 2015.

**References:**
1. Shibu K.V, "Introduction to Embedded System", Tata McGraw-Hill, 2009.
2. David E. Simon, "An Embedded Software Primer", Pearson Education Asia, Addison Wesley, 2001.
3. Raj Kamal, "Embedded Systems: Architecture, Programming, and Design", Tata McGraw Hill, 2003.
4. Steve Heath, "Embedded Systems Design", Newnes/An imprint of Elsevier, 2nd edition, 2005.
5. Jeeva Jose, "Internet of Things", KBP House, 1st edition, 2018.

**Course Outcomes:**
1. Understand features and design of embedded systems.
2. Design embedded systems using RTOS and ARM architecture.
3. Understand IoT building blocks, enabling technologies, and characteristics.
4. Design domain-specific IoT systems by analyzing MAC protocols and routing protocols.
5. Design IoT physical devices using Raspberry Pi and Arduino, programming with Python for sensor and actuator interfacing.

**21CSCP706 EMBEDDED SYSTEM AND INTERNET OF THINGS (IOT) LAB**

**Course Objectives:**
1. Understand the working principle of Embedded Systems.
2. Use various sensors in IoT applications.
3. Learn to use tools for designing IoT applications.

**List of Exercises:**

**Embedded System:**
1. Alphanumeric LCD interface using 8051 microcontroller.
2. Study of ARM evaluation system.
3. Flashing LEDs using ARM (LPC2148).
4. Interfacing keyboard and LCD using ARM (LPC2148).
5. Temperature sensor interface using ARM (LPC2148).

**IoT:**
1. Distance measurement using sensors.
2. Moisture content identification in agricultural land.
3. Fire alarm indicator using sensors.
4. Basic home automation system.
5. Room temperature monitoring.
6. Control PWM signals for various applications.
7. Designing a calculator using NumPy.
8. Developing games using PyGame.
9. Designing frontend GUI using TKinter.
10. Identification of earthquake using sensors.
11. Implementation of sorting mechanism in IoT.
12. Accessing GPIO using Google Assistant.
13. Creating a video player for IoT applications.
14. Uploading data to the cloud and monitoring.
15. Connecting social media platforms like Twitter.

**Course Outcomes:**
1. Develop real-time projects using 8051 microcontroller and ARM-based systems.
2. Design IoT-based products applicable to various real-time applications.
3. Demonstrate proficiency in programming and problem-solving skills related to embedded systems and IoT through viva questions.
**21CSST707 INDUSTRIAL TRAINING/RURAL INTERNSHIP/INNOVATION/ENTREPRENEURSHIP**

**Course Objectives:**
1. Expose students to understand technical and professional skill requirements in IT industries.
2. Impart professional skills for problem-solving in industries.
3. Train students to design innovative solutions for problems.
4. Motivate students to become entrepreneurs.
5. Develop communication and technical report writing skills.

**Course Structure:**
- **Duration:** Four weeks during the summer vacation before the end of the sixth semester.
- **Credits:** 2
- **Learning Mode:** Self-directed with guidance from a student counselor.

**Key Activities:**
1. Students will present a seminar (15-30 minutes) on a technical topic related to Computer Science and Engineering, followed by a discussion and defense of their presentation.
2. Each student will undergo training in reputed IT concerns or industries during the summer vacation for a minimum of four weeks.
3. Upon completion of the training, students will submit a detailed report within ten days of the start of the seventh semester.
4. Evaluation will be based on the technical presentation, report, interaction during the seminar, and viva-voce examination conducted by a team of staff members.

**Course Outcomes:**
1. Understand day-to-day tasks in IT industries and acquire technical and professional skills required.
2. Develop and refine technical and professional skills through practical work experience.
3. Design innovative solutions for industry requirements by applying knowledge gained from industry and academics.
4. Demonstrate the ability to develop a startup based on industry or people's needs.
5. Effectively communicate knowledge gained during the internship through documents and PowerPoint presentations.

**21CSPV803 PROJECT WORK AND VIVA VOCE**

**Course Objectives:**
1. Develop the ability to solve specific problems from identification to resolution.
2. Review literature relevant to the problem statement.
3. Develop a methodology for solving the problem.
4. Utilize modern tools if necessary to solve problems.
5. Prepare project reports and defend them during evaluation.

**Course Outcomes:**
1. Articulate and understand the problem statement and project objectives.
2. Conduct a review of state-of-the-art literature related to the project topic.
3. Design a methodology for the project using a block diagram approach.
4. Perform experiments and investigations using modern IT tools, presenting results using graphs, tables, and charts.
5. Effectively communicate findings through a technical report and PowerPoint presentation.

**Course Details:**
- **Duration:** 2 semesters
- **Credits:** 6
- **Project Requirements:** Students will work on a specific project, identify objectives, conduct literature reviews, design methodology, utilize modern tools, conduct experiments, analyze data, prepare reports, and defend their work during evaluation.

This course aims to equip students with practical skills in problem-solving, research methodology, data analysis, and communication through project work and viva voce presentations.