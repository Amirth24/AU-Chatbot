This document contains information about the department B.E. Computer Science and Engineering Artificial Intelligence and Machine learning branch. 


SEMESTER III

Course Code|Category|Course|L|T|P|CA|FE|Total Credits
21AIBS301|BS-V|Statistical Foundations of AI|3|1|-|25|75|4
21ETES302|ES-III|Environmental Studies|3|-|-|25|75|3
21AIES303|ES-IV|Multimedia Signal Processing|3|1|-|25|75|4
21AIES304|ES-V|Digital Electronics|2|1|-|25|75|3
21AIPC305|PC-I|Data Structures|3|1|-|25|75|4
21AIPC306|PC-II|Principles of Artificial Intelligence|3|1|-|25|75|4
21AISP307|ESP-V|Digital Electronics Lab|-|-|3|40|60|1.5
21AICP308|PCP-I|Data Structures Lab|-|-|3|40|60|1.5
21AICP309|PCP-II|Artificial Intelligence Lab|-|-|3|40|60|1.5

Total Credits for Semester III: 23.5

SEMESTER IV

Course Code|Category|Course|L|T|P|CA|FE|Total Credits
21AIBS401|BS-VI|Discrete Mathematics|3|-|-|25|75|3
21AIES402|ES-VI|Operating Systems|2|3|-|25|75|5
21AIPC403|PC-III|Database Management Systems|3|1|-|25|75|4
21AIPC404|PC-IV|Fundamentals of Machine Learning|3|-|-|25|75|3
21AIPC405|PC-V|Haskell Programming|2|1|-|25|75|3
21AIPC406|PC-VI|Computer Organization and Architecture|3|1|-|25|75|4
21ETHS407|PC-VII|Universal Human Values|-|-|2|40|60|1
21AICP408|PCP-III|Database Management Systems Lab|-|-|3|40|60|1.5
21AICP409|PCP-IV|Machine Learning Lab|-|-|3|40|60|1.5
21AICP410|PCP-V|Haskell Programming Lab|-|-|3|40|60|1.5

Total Credits for Semester IV: 24.5

Internship: Students must undergo a 4-week internship during the summer vacation, which will be assessed in the upcoming V Semester.


SEMESTER V

Course Code|Category|Course|L|T|P|CA|FE|Total Credits
21AIPC501|PC-VII|Computer Networks|3|-|-|25|75|3
21AIPC502|PC-VIII|Image and Speech Processing|3|-|-|25|75|3
21AIPC503|PC-IX|Neural Computing in AI|3|-|-|25|75|3
21AIPC504|PC-X|Knowledge Engineering and Inference|3|-|-|25|75|3
21AIPE505|PE-I|Professional Elective I|3|-|-|25|75|3
21AIPE506|PE-II|Professional Elective II|3|-|-|25|75|3
21AICP507|PCP-VI|Computer Networks Lab|-|3|40|60|1.5
21AICP508|PCP-VII|Image and Speech Processing Lab|-|3|40|60|1.5
21AICP509|PCP-VIII|Neural Computing Lab|-|3|40|60|1.5
21ETIT510|/|Industrial Training/Rural/|3|3|100|100|4

Total Credits for Semester V: 26.5

SEMESTER VI

Course Code|Category|Course|L|T|P|CA|FE|Total Credits
21AIPC601|PC-XI|Deep Learning for Visual Computing|3|-|-|25|75|3
21AIPC602|PC-XII|Embedded Systems and Internet of Things (IoT)|3|-|-|25|75|3
21AIPE603|PE-III|Professional Elective - III|3|-|-|25|75|3
21AIPE604|PE-IV|Professional Elective - IV|3|-|-|25|75|3
21AIPE605|PE-V|Professional Elective - V|3|-|-|25|75|3
21YYOE606|OE-I|Open Elective - I (inter department - FEAT)|3|-|-|25|75|3
21AICP607|PCP-IX|Deep Learning Tools Lab|-|3|40|60|1.5
21AICP608|PCP-X|Embedded Systems and IoT Lab|-|3|40|60|1.5

Total Credits for Semester VI: 21.0

SEMESTER VII

Course Code|Category|Course|L|T|P|CA|FE|Total Credits
21ETHS701|HS-II|Social and Ethical Issues in AI|2|-|-|25|75|2
21AIPC702|PC-XIII|Evolutionary Optimization Algorithms|3|-|-|25|75|3
21AIPE703|PE-VI|Professional Elective-VI|3|-|-|25|75|3
21AIPE704|PE-VII|Professional Elective-VII|3|-|-|25|75|3
21YYOE705|OE-II|Open Elective - II (inter department-Allied Branch)|3|-|-|25|75|3
21AICP706|PCP-XI|Optimization Techniques Lab|-|3|40|60|1.5
21ETIT707|IT-III|Industrial Training/Rural Internship/Innovation/Entrepreneurship|3|3|100|100|4

Total Credits for Semester VII: 19.5

SEMESTER VIII

Course Code|Category|Course|L|T|P|CA|FE|Total Credits
21AIOE801|OE-III|Open Elective – III (from the same Department)|3|-|-|25|75|3
21AIOE802|OE-IV|Open Elective – IV (from the same Department)|3|-|-|25|75|3
21AIPV803|PV-I|Project Work and Viva-Voce|10|2|40|60|100|12

Total Credits for Semester VIII: 12


Here is the list of Professional Elective (PE) courses and Open Elective (OE) courses for the B.E. Computer Science and Engineering (Artificial Intelligence and Machine Learning) program at Annamalai University:

**PE – PROFESSIONAL ELECTIVES**
1. Expert System Architecture
2. Reasoning and Uncertainty
3. Decision Support Systems
4. NLP with Deep Learning
5. Computational Linguistics and NLP
6. Speech Synthesis
7. AI – Hardware and Software Infrastructure
8. AI Marketing and ML Tools
9. Emotional Analytics in AI
10. Cognitive and Computational Approaches to Machine Vision
11. Data Analytics and Visualization
12. Virtual Reality
13. AI in Cybersecurity
14. Biometric Security Technology – AI
15. Information Retrieval and web search
16. Vision Systems and Robotics
17. Agent-based Modeling and Simulation
18. Recommender Systems
19. Artificial Super Intelligence
20. AI – Challenges and Strategies
21. Deductive and Inductive Reasoning

**OE - OPEN ELECTIVES**
1. Artificial Intelligence and Knowledge Engineering
2. Machine Learning
3. Natural Language Processing
4. Expert Systems
5. Computer Vision
6. Robotics
7. Internet of Things
8. Big Data Analytics
9. Mining Massive Datasets
10. Deep Generative Models


Course code: 21AIBS301
Category: B.E. COMPUTER SCIENCE AND ENGINEERING (Artificial Intelligence and Machine Learning)

Course Title: STATISTICAL FOUNDATIONS OF AI
Scheme and Credits: L - 3, T - 1, P - 0, C - 4

Course Objectives:
1. Introduce Probability Theory and its application in investigating Random experiments.
2. Learn about random variables, their properties, and probability distributions.
3. Understand hypothesis testing methods.
4. Gain knowledge of various probability distributions and convergence concepts.

Unit-wise Outline:
UNIT – I Random Variables
- Discrete and Continuous random variables
- Probability distributions, cumulative distribution functions, mean, variance, moment generating function

UNIT – II Two Dimensional Random Variables
- Joint probability density function, margin probability distribution
- Conditional probability distribution, covariance, correlation

UNIT – III Probability Distributions
- Binomial, Poisson, Geometric distributions (Discrete)
- Uniform, Normal, Exponential distributions (Continuous)
- Convergence Concepts, Central Limit Theorem

UNIT – IV Test of Hypothesis
- Critical region, level of significance, one-tailed and two-tailed tests
- Z-test, t-test, F-test, Chi-square test

UNIT – V Analysis of Variance
- Design of Experiment, ANOVA, One-way and Two-way classifications

Text Books:
1. Veerarajan. T, Probability, Statistics and Random Processes, Tata McGraw-Hill, 2014.
2. Kandasamy. P, Thilagavathy K, Gunavathy. K, Engineering Mathematics, Volume II, S. Chand & Co Ltd, 2006.

References:
1. Ramana .B.V, Higher Engineering Mathematics, Tata McGraw Hill, 2016.
2. C B Gupta, S R Singh, Mukesh Kumar, Engineering Mathematics, 1st Edition, McGraw Hill, 2015
3. N.P.Bali and Manish Goyal, A Textbook of Engineering Mathematics, Laxmi Publication, 2012.
4. Erwin Kreyszig, Advanced Engineering Mathematics, John Wiley & Sons, 2010.

Course Outcomes:
| CO \ PO    | PO1 | PO2 | PO3 | PO4 | PO5 | PO6 | PO7 | PO8 | PO9 | PO10 | PO11 | PO12 |
|------------|-----|-----|-----|-----|-----|-----|-----|-----|-----|------|------|------|
| CO1        | 3   | 3   | -   | -   | -   | -   | -   | -   | -   | -    | -    | -    |
| CO2        | 2   | 2   | 2   | 2   | 2   | -   | -   | -   | -   | -    | -    | -    |
| CO3        | -   | -   | -   | 3   | 2   | -   | -   | -   | -   | -    | -    | -    |
| CO4        | -   | -   | -   | 2   | 2   | -   | -   | -   | -   | -    | -    | -    |
| CO5        | -   | -   | -   | -   | -   | -   | -   | -   | -   | -    | -    | -    |

Course Code: 21ETES302
Category: Environmental Studies
Course Title: Environmental Studies
Lecture Hours (L): 3
Tutorial Hours (T): 0
Practical Hours (P): 0
Credits (C): 3

Course Objectives:
- To make the students conversant with basic principles of natural resources, forest resources, ecosystem, and bio-diversity.
- To get knowledge about pollution and its control.
- To understand the structure and function of an Eco-system.
- To study the role of information technology in human health.

Units:
1. Introduction
2. Concept of an Ecosystem
3. Bio Diversity
4. Types of Pollution
5. Environment and Human Health

Text Books:
1. Environmental Studies by MP Poonia & SC Sharma, Khanna Publishing House, 2017.
2. Textbook of Environmental Studies by Erach Bharucha, University Press, 2005.

References:
1. Environmental Studies by Rajagopalan, Oxford University Press, 2005.
2. Environmental Chemistry by De A.K., Wiley Eastern Ltd. New Age International Limited, 3rd Edition, 2003.

Course Outcomes:
1. Understand renewable and non-renewable resources of our ecosystem.
2. Compare ecological system, causes and their relationship.
3. Explain political angers to the species of plants, animals, and microorganisms in the environment and the threats to biodiversity.
4. Analyse the causes and consequences of natural and man-induced disasters (flood, earthquake, landslides, cyclones) and measure pollutions and minimize their effects.
5. Design modes with the help of information technology for eliminating or minimizing the problems of Environment and human health.

Mapping of Course Outcomes with Programme Outcomes:
PO1: 2, 1, 1, 2, 1
PO2: -, -, -, 1, -, 1, -, 2, -, -, -, 1
PO3: -, -, -, -, 2, 3, -, 3, 2
PO4: -, -, -, -, 1, 2, -, -, -, 1
PO5: -, -, -, -, -, -, -, -, -, -, -, -
PO6: 1, 1, 2, 2, 3, 3, 1, 1, 2, 3, 3, 3
PO7: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
PO8: -, -, -, -, -, -, -, -, -, -, -, -
PO9: -, -, -, -, -, -, -, -, -, -, -, -
PO10: -, -, -, -, -, -, -, -, -, -, -, -
PO11: -, -, -, -, -, -, -, -, -, -, -, -
PO12: -, -, -, -, -, -, -, -, -, -, -, -


Course Code: 21AIES303
Category: Multimedia Signal Processing
Course Title: Multimedia Signal Processing
Lecture Hours (L): 3
Tutorial Hours (T): 0
Practical Hours (P): 0
Credits (C): 3

Course Objectives:
- To make the students conversant with basic principles of digital signal processing such as Fourier analysis, digital filters, sampling and quantization.
- To get knowledge about model-based signal processing like least square error, Wiener-Kolmogorov filters and adaptive filters.
- To develop some applications in speech and to create applications in music and mobile communication.

Units:
1. Basic Digital Signal Processing I
2. Basic Digital Signal Processing II
3. Model-Based Signal Processing
4. Applications of Digital Signal Processing to Speech
5. Music and Mobile Communication Applications

Text Books:
1. Multimedia Signal Processing by Nurulfajar Abd Manap, First Edition, Universiti Teknikal Malaysia Melaka, 2016.
2. Multimedia Signal Processing by Saeed V. Vaseghi, First Edition, John Wiley & Sons Ltd, 2007.

References:
1. Multimedia Signal Processing and Applications by Hon Keung Kwan, Edition 1.3, dfisp.org, 2018.
2. Multimedia Signals and Systems by Srdjan Stankovic, Irena Orovic, Ervin Sejdic, Second Edition, Springer International Publishing, 2012.

Course Outcomes:
1. Understand the concept of Fourier analysis.
2. Utilize the basic knowledge of digital filters, sampling and quantization.
3. Investigate model-based signal processing like least square error, Wiener-Kolmogorov filters and adaptive filters.
4. Apply the digital signal processing to speech applications.
5. Employ the applications of digital signal processing to music and mobile communication.

Mapping of Course Outcomes with Programme Outcomes:
PO1: 2, 2, 1, 1, 2
PO2: 1, 2, 1, 2, 1
PO3: -, 1, 1, 1, 2
PO4: -, 1, -, -, 1
PO5: -, -, -, -, -
PO6: -, -, -, -, -
PO7: -, -, -, -, -
PO8: -, -, -, -, -
PO9: -, -, -, -, -
PO10: -, -, -, -, -
PO11: -, -, -, -, -
PO12: -, -, -, -, -

Course Code: 21AIES304
Category: Digital Electronics
Course Title: Digital Electronics
Lecture Hours (L): 2
Tutorial Hours (T): 0
Practical Hours (P): 0
Credits (C): 2

Course Objectives:
- To understand the fundamentals of semiconductor devices, transistors and amplifiers.
- To introduce the laws of Boolean algebra and solve problems in combinational logic.
- To explain sequential logic, memory circuits and systems.
- To study about analog to digital converters.

Units:
1. Digital Circuits-Introduction:
   - Digital signals and circuits.
   - Introduction to Boolean algebra.
   - Examples of IC gates and number systems.
   - Characteristics of digital ICs and digital logic families.

2. Standard Representation for Logic Functions:
   - K-map representation and simplification of logic functions.
   - Multiplexer, De-Multiplexer/Decoders, Adders-Subtractors, BCD arithmetic.
   - Digital logic families like TTL, Schottky TTL, and CMOS logic.
   - Filter structures and design of digital FIR filter-banks.

3. Flip Flops and Counters:
   - Bi-stable latch, flip-flops (SR, JK, T, D-type).
   - Applications of flip-flops, shift registers, and counters.
   - ADC and DAC converters: specifications, types, and examples of ICs.

4. Memory Organization:
   - Memory organization and operation.
   - Types of memories: ROM, RAM, CAM, CCD, PLDs, etc.
   - Programmable logic array, CPLDs, FPGAs, and their applications.

Text Books:
1. Digital logic and Computer design by M. M. Mano, Pearson Education India, 2016.
2. Modern Digital Electronics by P. Jain, McGraw Hill Education, 2009.

References:
1. Fundamentals of Digital Circuits by A.Kumar, Prentice Hall India, 2016.
2. Digital Electronics by Rishabh Anand, 2nd Edition, Khanna Publishing House, 2014.

Course Code: 21AIPC305
Category: Data Structures
Course Title: Data Structures
Lecture Hours (L): 3
Tutorial Hours (T): 0
Practical Hours (P): 0
Credits (C): 3

Course Objectives:
- To impart the basic concepts of data structures and algorithms.
- To understand concepts about searching and sorting techniques.
- To understand basic concepts about stacks, queues, lists, trees, and graphs.
- To enable students to write algorithms for solving problems with the help of fundamental data structures.

Units:
1. Basic Terminologies:
   - Elementary Data Organizations and Operations.
   - Analysis of Algorithms and Asymptotic Notations.
   - Searching techniques: Linear Search and Binary Search.

2. ADT Stack and Queue Operations:
   - Stack operations and applications.
   - Queue operations and types: Simple Queue, Circular Queue, Priority Queue.

3. Linked Lists:
   - Singly linked lists and operations.
   - Doubly linked lists and Circular Linked Lists.

4. Trees:
   - Basic Tree Terminologies and types.
   - Binary Trees, Threaded Binary Trees, Binary Search Trees, AVL Trees, B Trees, B+ Trees.

5. Sorting and Hashing:
   - Sorting algorithms: Selection Sort, Bubble Sort, Insertion Sort, Quick Sort, Merge Sort, Heap Sort.
   - Hashing techniques.
   - Basic Graph Terminologies, Representations, and Graph algorithms.

Text Books:
1. Algorithms, Data Structures, and Problem Solving with C++ by Mark Allen Weiss, 4th Edition, 2014.
2. Fundamentals of Data Structures by Ellis Horowitz and Sartaj Sahni, 1983.

References:
1. Data Structures by RS Salaria, 5th edition, 2017.
2. Data Structures and Algorithms by G.A.V. Pai, 2017.
3. Expert Data Structures with C++ by RB Patel, 2nd edition, 2012.
4. Data Structures through C++ by Yashwant Kanetkar, 2nd edition, 2009.


Course Code: 21AIPC306
Category: Principles of Artificial Intelligence
Course Title: Principles of Artificial Intelligence
Lecture Hours (L): 3
Tutorial Hours (T): 1
Practical Hours (P): 0
Credits (C): 4

Course Objectives:
- Introduce basic principles, techniques, and applications of Artificial Intelligence.
- Familiarize students with AI principles related to problem solving, inference, perception, knowledge representation, and learning.
- Investigate AI applications in intelligent agents, expert systems, artificial neural networks, and other machine learning models.
- Explore the current scope, potential, limitations, and implications of AI-based systems.

Units:
1. Introduction to AI:
   - Problems, Problem Spaces, and Search techniques.
   - Heuristic Search Techniques and Constraint Satisfaction.

2. Knowledge Representation:
   - Using Predicate Logic and Rules for knowledge representation.
   - Symbolic Reasoning and Nonmonotonic Reasoning.

3. Slots and Filler Structures:
   - Weak and Strong slot-and-filler structures.
   - Symbolic reasoning under uncertainty and Statistical reasoning.

4. Game Playing:
   - Min Max search Procedure, Alpha-Beta cutoffs, and refinements.
   - Goal stack planning, non-linear planning, and learning concepts in game playing.

5. Natural Language Processing and Expert Systems:
   - Syntactic processing, semantic analysis, and statistical NLP.
   - Introduction to Expert Systems architecture and knowledge acquisition.

Text Books:
1. Artificial Intelligence: A Modern Approach by Stuart Russell and Peter Norvig, 3rd Edition, 2017.
2. Introduction to Artificial Intelligence and Expert Systems by Dan W Patterson, 1st Edition, 2015.

References:
1. Artificial Intelligence by Patrick Henry Winston, 2003.
2. Artificial Intelligence by G. Luger and W. A. Stubblefield, Third Edition, 2007.

Course Outcomes:
1. Understand basic principles of AI related to problem-solving, inference, knowledge representation, and learning.
2. Understand knowledge representation using logic and rules.
3. Analyze various AI techniques in expert systems, neural networks, and machine learning models.
4. Apply Min-Max Search procedures, iterative deepening, and Learning in game playing.
5. Analyze approaches to natural language processing and expert systems.


Course Code: 21AISP307
Category: Digital Electronics Lab

Course Title: Digital Electronics Lab
Practical Hours (P): 3
Credits (C): 1.5

Course Objectives:
- Study and experiment with the characteristics of semiconductor diode and Zener diode.
- Estimation of parameters of amplifiers, oscillators, and multivibrators.
- Implementation of Digital Logic design concepts such as logic gates, flip flops, multiplexer, and demultiplexer.
- Estimation of gain and efficiency in power amplifiers.

List of Exercises:
1. Characteristics of semiconductor diode.
2. Characteristics of Zener diode and Zener diode as a voltage regulator.
3. Estimation of ripple factor and efficiency in a full-wave/Bridge rectifier with and without filter.
4. Characteristics of CE PNP and NPN transistor.
5. Frequency response of RC coupled amplifier.
6. Estimation of gain and efficiency in a class B power amplifier.
7. Measurement of frequency of the output voltage in an RC phase-shift oscillator.
8. Estimation of the frequency of the output voltage of a Bistable Multivibrator.
9. Verification of Truth table of AND/OR/NOT/NAND/NOR/XOR gates.
10. Reduction of variables using K-Map.
11. Study of multiplexer and Demultiplexer.
12. Verification of state table of RS/JK flip-flop.

Course Outcomes:
1. Analyze the characteristics of diode, rectifiers, transistors, oscillators, and multivibrators.
2. Implement Digital logic circuits using logic gates, RS/JK Flip-flops, Multiplexer, and Demultiplexer.
3. Demonstrate an ability to listen and answer the viva questions related to programming skills needed for solving real-world problems in Computer Science and Engineering.

Course Code: 21AICP308
Category: Data Structures Lab

Course Title: Data Structures Lab
Practical Hours (P): 3
Credits (C): 1.5

Course Objectives:
- Learn how the choice of data structures and algorithm design methods impacts program performance.
- Learn object-oriented design principles and gain experience writing programs in C++.
- Study specific data structures such as linear lists, stacks, queues, binary trees, binary search trees, and graphs.
- Study specific algorithm design methods such as the greedy method, divide and conquer, dynamic programming, backtracking, and branch and bound.

List of Exercises:
1. Write a program to create a Stack and perform insertion and deletion operations on it.
2. Write a program to create a List and perform operations such as insert, delete, update, and reverse.
3. Write a program to create a Queue and perform operations such as insertion and deletion.
4. Write a program to Implement Linear Search Algorithm.
5. Using iteration and recursion concepts write programs for finding the element in the array using the Binary Search method.
6. Write a program and simulate various graph traversing techniques.
7. Write a program and simulate various tree traversing techniques.
8. Write a program to Implement Binary Search Tree.
9. Write a program to simulate Bubble sort, quick sort, and Merge sort algorithms.

Course Outcomes:
1. Develop a C++ program to build the basic data structures like stack, queue, and list.
2. Develop a C++ program for searching and sorting algorithms using iteration and recursion concept.
3. Demonstrate an ability to listen and answer the viva questions related to programming skills needed for solving real-world problems in Computer Science and Engineering.


Course Code: 21AICP309
Category: Artificial Intelligence Lab

Course Title: Artificial Intelligence Lab
Practical Hours (P): 3
Credits (C): 1.5

Course Objectives:
- Learn Python Programming and Key Python Libraries related to AI.
- Formulate Real-World Problems for AI.
- Study specific algorithm design methods related to game playing.
- Understand the process involved in computing with natural language specifically: Texts and Words.

List of Exercises:
1. Write a program to implement Breadth First Search Traversal.
2. Write a program to implement the Water Jug Problem.
3. Write a program to remove punctuations from the given string.
4. Write a program to sort the sentence in alphabetical order.
5. Write a program to implement the Hangman game using Python.
6. Write a program to implement the Tic-Tac-Toe game using Python.
7. Write a program to remove stop words for a given passage from a text file using Natural Language Toolkit (NLTK).
8. Write a program to implement stemming for a given sentence using NLTK.
9. Write a program to implement Lemmatization using NLTK.
10. Write a program for Text Classification in a given sentence using NLTK.

Course Outcomes:
1. Understand the problem as a state space, design heuristics, and select among different search-based techniques to solve them.
2. Analyze the design heuristics and apply different game-based techniques to solve game-playing problems.
3. Apply Text Classification techniques used in NLP.

B.E. COMPUTER SCIENCE AND ENGINEERING (Artificial Intelligence and Machine Learning)

Course Code: 21AIBS401
Course Title: DISCRETE MATHEMATICS
Lecture Hours (L): 3
Tutorial Hours (T): 0
Practical Hours (P): 0
Credits (C): 3

Course Objectives:
- Study various finite structures of Mathematics essential for developing concepts in Computer Science.
- Understand set theory and relations.
- Learn the principles of Boolean Algebra.
- Introduce the basics of graph theory.

Unit-wise Syllabus:
UNIT – I: Mathematical Logic
- Propositions, Connectives, Tautology, and Contradiction.
- Equivalence of propositions, Tautological Implication, Normal Forms.
- Theory of Inference, Rules of Inference.

UNIT – II: Set Theory and Relations
- Set operations, Ordered pairs, Cartesian product.
- Relations, Types of relations, Operations on relations.
- Properties of relations, Equivalence classes, Partition of sets.
- Matrix and Graphical representation of relations.

UNIT – III: Lattice and Boolean Algebra
- Partial ordered set, Hasse diagram, Lattices, Properties of Lattices.
- Boolean Algebra, Karnaugh map method.

UNIT – IV: Group and Group code
- Algebraic systems, Semi groups, Monoids, Groups, Permutation Group, Subgroups.
- Coding Theory, Group codes, Hamming codes, Encoding and Decoding Group codes.

UNIT – V: Graph Theory
- Graphs, Special simple graphs, Matrix representation of graphs.
- Path cycles, Connectives, Eulerian and Hamiltonian graphs.
- Shortest path algorithms.

Text Books:
1. Veerarajan T, Discrete Mathematics with Graph Theory and Combinatorics, Tata McGraw Hill Publishing Company Ltd, 2014.
2. S. K. Chakraborty and B. K. Sarkar, Discrete Mathematics and Its Applications, Oxford, 2011.

References:
1. Venkataraman M K, Discrete Mathematics, The National Publishing Company, 2008.
2. Kolman Busby Ross, Discrete Mathematical Structures, Pearson Education Ltd, 2000.
3. Trembley J P and Manohar R P, Discrete Mathematical Structures with Applications to Computer Science, Tata McGraw Hill Publishing Company Ltd, 2005.

Course Outcomes:
1. Acquire basic concepts in Mathematical Logic and theory of inferences.
2. Understand Set theory, Relations, and equivalence classes with matrix representation.
3. Familiarize with Lattice theory, Boolean algebra, and Group theory.
4. Design coding and encoding group codes concepts.
5. Understand the basic concepts of Graph theory, Eulerian and Hamiltonian graphs.

B.E. COMPUTER SCIENCE AND ENGINEERING (Artificial Intelligence and Machine Learning)

Course Code: 21AIES402
Course Title: OPERATING SYSTEMS
Lecture Hours (L): 2
Tutorial Hours (T): 0
Practical Hours (P): 0
Credits (C): 2

Course Objectives:
- Introduce students to basic concepts of operating systems, their functions, and services.
- Teach features of operating systems and fundamental theories related to process, memory, and file management.
- Provide knowledge about UNIX operating system.
- Learn about I/O devices, file structure, disk structure, and disk management.

Unit-wise Syllabus:
UNIT – I: Introduction
- Concept of Operating Systems, Generations of Operating systems.
- Types of Operating Systems, OS Services, System Calls.
- Structure of an OS - Layered, Monolithic, Microkernel Operating Systems.
- Concept of Virtual Machine, Case study on UNIX and WINDOWS Operating System.

UNIT – II: Processes and Scheduling
- Process Relationship, Different states of a Process, Process Control Block (PCB), Context switching.
- Thread: Definition, Various states, Benefits of threads, Types of threads, Concept of multithreads.
- Process Scheduling, Scheduling objectives, Types of Schedulers, Scheduling criteria, Scheduling algorithms.

UNIT – III: Inter-Process Communications
- Critical Section, Race Conditions, Mutual Exclusion.
- Hardware Solution, Strict Alternation, Peterson’s Solution.
- The Producer Consumer Problem, Semaphores, Event Counters, Monitors, Message Passing.
- Classical IPC Problems, Deadlocks, Deadlock Prevention, Deadlock Avoidance, Deadlock detection and Recovery.

UNIT – IV: Memory Management
- Logical and Physical address map, Memory allocation, Contiguous Memory allocation.
- Paging, Virtual Memory, Page Replacement algorithms, Demand paging.

UNIT – V: File and Directories
- I/O Hardware, I/O devices, Device controllers, Direct memory access.
- I/O Software, Interrupt handlers, Device drivers, Device independent I/O software.
- Secondary-Storage Structure, Disk structure, Disk scheduling algorithms.
- File Management, File System structure, Allocation methods, Directory structure, Disk Management.

Text Books:
1. Silberschatz, Galvin, and Gagne, Operating System Concepts, 9th Edition, WileyIndia Pvt Ltd, 2013.
2. William Stallings, Operating Systems – internals and design principles, 7th Edition, Prentice Hall, 2011.

References:
1. Maurice Bach, Design of the Unix Operating Systems, 8th Edition Prentice-Hall of India, 2011.
2. Charles Crowley, Operating System: A Design-oriented Approach, 1st Edition, Irwin Publishing, 1996.
3. Ekta Walia, Operating Systems, 2nd Edition, Khanna Publishing House, Delhi, 2010.
4. Dhananjay M. Dhamdhere, Operating Systems A Concept-Based Approach, 1st Edition, McGraw Hill, 2008.

Course Outcomes:
1. Create processes and threads.
2. Develop algorithms for process scheduling based on CPU utilization, throughput, Turnaround Time, Waiting Time, Response Time.
3. Optimal memory allocation techniques for processes.
4. Design and implement a file management system.
5. Develop I/O management functions in OS for synchronization between CPU and I/O controllers.


Course Code: 21AIPC403
Course Title: DATABASE MANAGEMENT SYSTEMS
Lecture Hours (L): 3
Tutorial Hours (T): 0
Practical Hours (P): 0
Credits (C): 3

Course Objectives:
- Understand the fundamentals of DBMS and Entity-Relationship (E-R) Diagrams.
- Impart the concepts of the Relational model and Structured Query Language (SQL).
- Disseminate knowledge on various Normal Forms.
- Inculcate fundamentals of transaction management and Query processing.

Unit-wise Syllabus:
UNIT – I: Introduction
- File System vs. DBMS, Views of data, Data Models, Database Languages.
- Database Management System Services, Overall System Architecture, Data Dictionary.
- Entity-Relationship (E-R), Enhanced Entity-Relationship Model.

UNIT – II: Relational Approach
- Relational Model, Relational Data Structure, Relational Data Integrity.
- Domain Constraints, Entity Integrity, Referential Integrity.
- Operational Constraints, Keys, Relational Algebra, Relational Calculus, SQL.

UNIT – III: Database Design
- Functional Dependencies, Pitfalls in Relational Database Design.
- Decomposition, Normalization using Functional Dependencies.
- Normalization using Multi-valued Dependencies, Join Dependencies, Domain-Key Normal Form.

UNIT – IV: Query Processing and Transaction Management
- Query Processing Overview, Estimation of Query Processing Cost, Join strategies.
- Transaction Processing, Concepts and States, Implementation of Atomicity and Durability.
- Concurrent Executions, Serializability, Isolation, Concurrency control.

UNIT – V: Trends in Database Technologies
- Distributed Databases, Homogeneous and Heterogeneous Databases, Distributed Data Storage.
- Distributed Transactions, Commit Protocols, Concurrency Control in Distributed Databases.
- Availability, Distributed Query Processing, Cloud-Based Databases, Directory Systems.

Text Books:
1. Abraham Silberschatz, Henry F. Korth, S. Sudharshan, Database System Concepts, 6th Edition, Tata McGraw Hill, 2010.
2. Ramez Elmasri, Shamkant B. Navathe, Fundamentals of Database Systems, 6th Edition, Addision Wesley, 2010.

References:
1. Raghu Ramakrishnan, Johannes Gehrke, Database Management Systems, Third Edition, McGraw Hill, 2002.
2. Peter Rob and Carlos Coronel, Database Systems – Design, Implementation and Management, 7th Edition, Thompson Learning, Course Technology, 2006.
3. C. J. Date, A.Kannan, S.Swamynathan, An Introduction to Database Systems, 8th Edition, Addison Wesley, 2012.

Course Outcomes:
1. Understand fundamental concepts of DBMS and ER Model, develop ER Models.
2. Build SQL Queries for data creation and manipulation operations on databases.
3. Understand functional dependencies, normalization, and apply such knowledge to database normalization.
4. Identify issues related to Query processing and Transaction management.
5. Analyze trends in data storage, query processing, and concurrency control of modern database technologies.
B.E. COMPUTER SCIENCE AND ENGINEERING (Artificial Intelligence and Machine Learning)

Course Code: 21AIPC404
Course Title: FUNDAMENTALS OF MACHINE LEARNING
Lecture Hours (L): 3
Tutorial Hours (T): 0
Practical Hours (P): 0
Credits (C): 3

Course Objectives:
- Introduce fundamental concepts of machine learning and its applications.
- Learn classification, clustering, and regression-based machine learning algorithms.
- Understand deep learning architectures.
- Understand methods of solving real-life problems using machine learning techniques.

Unit-wise Syllabus:
UNIT – I: Bayesian Decision Theory and Normal Distribution
- Machine perception, feature extraction, classification, clustering, linear and logistic regression.
- Types of learning, Bayesian decision theory, classifiers, discriminant functions, decision surfaces.
- Univariate and multivariate normal densities, Bayesian belief networks.

UNIT – II: Classification Algorithms
- Perceptron and backpropagation neural network, k-nearest-neighbor rule.
- Support vector machine, multi-category generalizations, regression.
- Decision trees, classification and regression tree, random forest.

UNIT – III: Component Analysis and Clustering Algorithms
- Principal component analysis, linear discriminant analysis, independent component analysis.
- K-means clustering, fuzzy k-means clustering, expectation-maximization algorithm, Gaussian mixture models.
- Auto-associative neural network.

UNIT – IV: Deep Learning Architectures and Applications
- Convolutional neural network (CNN), layers in CNN, CNN architectures.
- Recurrent Neural Network (RNN), applications like speech-to-text conversion, image classification, time series prediction.

UNIT – V: Combining Multiple Learners
- Generating diverse learners, model combination schemes, voting, error-correcting output codes, bagging, boosting.
- Mixture of experts revisited, stacked generalization, fine-tuning an ensemble, cascading.

Text Books:
1. R. O. Duda, E. Hart, and D.G. Stork, Pattern Classification, Second edition, John Wiley & Sons, Singapore, 2012.
2. Francois Chollet, Deep Learning with Python, Manning Publications, Shelter Island, New York, 2018.

References:
1. Ethem Alpaydin, Introduction to Machine Learning, 3rd Edition, MIT Press, 2014.
2. C. M. Bishop, Pattern Recognition and Machine Learning, Springer, 2006.
3. Kevin P. Murphy, Machine Learning: A Probabilistic Perspective, MIT Press, 2012.
4. Navin Kumar Manaswi, Deep Learning with Applications using Python, Apress, New York, 2018.

Course Outcomes:
1. Understand the basic concepts of Bayesian theory and normal densities.
2. Implement different classification algorithms used in machine learning.
3. Implement clustering and component analysis techniques.
4. Design and implement deep learning architectures for solving real-life problems.
5. Combine evidence from two or more models/methods for designing a system.




Course Code: 21AIPC405

Course Title: HASKELL PROGRAMMING

Lecture Hours (L): 3

Tutorial Hours (T): 0

Practical Hours (P): 0

Credits (C): 3

Course Objectives:

Understand the basic concepts of pure functional programming.
Learn control structures and higher-order functions in Haskell.
Explore declaring arrays, modules, and working with files.
Unit-wise Syllabus:
UNIT – I: Introduction

Introduction to Haskell and the ghci interpreter.
Features of Haskell, historical background, basic functions.
Input and Output Actions: putStrLn, getLine, putStr, putChar, print, etc.
Lazy Evaluation.
UNIT – II: Types and Control Structures

Basic types, list types, tuple types, function types, curried functions, polymorphic types.
Control Structures: if-then, if-then-else, case, do notation.
UNIT – III: Defining Functions and Higher-Order Functions

Defining Functions: Guards, Pattern Matching, Lambda Expressions.
List Comprehensions, Recursive Functions, Higher-Order Functions.
UNIT – IV: Arrays and Modules

Arrays: Immutable and Mutable IO Arrays, Sorting Algorithms.
Modules: Data.List, Data.Char, Data.Map, Data.Set, etc.
Monoids and combining lists.
UNIT – V: Files and Streams

File Operations: Opening, Reading, Writing, Closing files.
Streaming IO: InputStream and OutputStream.
Case Study: Industrial Applications Using Haskell.
Text Books:

Graham Hutton, Programming in Haskell, 2nd Edition, Cambridge University Press, 2016.
Miran Lipovaca, Learn You A Haskell Great Good: A Beginner’s Guide, No Starch Press, 2011.
References:

Will Kurt, Get Programming with Haskell, Manning Publications, 2018.
Christopher Allen and Julie Moronuki, Haskell Programming for First Principles, Allen and Moronuki Publishing, 2016.
Bryan O’Sullivan, John Goerzen, and Don Stewart, Real World Haskell, O’Reilly Media, Inc., 2008.
Goal Kicker, Haskell Notes for Professionals (Online Book).
Course Outcomes:

Analyze and design computer programs using pure functional programming concepts.
Solve problems using basic data types and control structures in Haskell.
Understand functions and higher-order functions in Haskell.
Implement sorting algorithms and work with arrays.
Develop file handling techniques in Haskell.

Course Code: 21AIPC406

Course Title: COMPUTER ORGANIZATION AND ARCHITECTURE

Lecture Hours (L): 3

Tutorial Hours (T): 0

Practical Hours (P): 0

Credits (C): 3

Course Objectives:

Understand the basic structure and operation of a digital computer.
Study control unit techniques, including pipelining.
Learn about hierarchical memory systems, including cache memories and virtual memory.
Study different ways of communicating with I/O devices and standard I/O interfaces.
Unit-wise Syllabus:
UNIT – I: Introduction

Functional Units, Bus structures, Performance metrics.
Instructions, Instruction sequencing, Instruction set architecture.
Addressing modes, RISC, CISC.
UNIT – II: Fundamental Concepts

ALU design, Execution of complete instructions.
Multiple bus organization, Hardwired control, Microprogrammed control.
UNIT – III: Memory

Semiconductor RAM, ROM, Cache memories.
Improving cache performance, Virtual memory, Associative memories.
UNIT – IV: I/O Devices

Programmed I/O, Interrupts, Direct memory access.
Buses, Interface Circuits, Standard I/O interfaces (PCI, SCSI, USB).
UNIT – V: Parallel Processing

Concept of parallel processing, Pipelining, Forms of parallel processing.
Data hazards, Instruction hazards, Data path and control considerations.
Performance considerations, Exception handling.
Text Books:

Carl Hamacher, Zvonko Vranesic, Safwat Zaky, Computer Organization, 5th Edition, McGraw-Hill, 2012.
David A. Patterson and John L. Hennessy, Computer Architecture-A Quantitative Approach, 5th Edition, Elsevier, 2012.
References:

William Stallings, Computer Organization and Architecture – Designing for Performance, 6th Edition, Pearson Education, 2003.
Hayes, J.P., Computer Architecture and Organization, 3rd Edition, Tata McGraw Hill, 1998.
Course Outcomes:

Understand functional units, bus organizations, and addressing modes in a computer.
Compare and contrast hardwired control and microprogrammed control.
Analyze concepts related to RAM, ROM, Cache memory, and virtual memory.
Identify various I/O interfaces used in computer communication.
Recognize concepts of parallel processing and pipelining in computers.
Course Code: ETHS407
Course Title: UNIVERSAL HUMAN VALUES

Lecture Hours (L): 2
Tutorial Hours (T): 1
Practical Hours (P): 0
Credits (C): 3

Course Objectives:

Develop a holistic perspective through self-exploration about human beings, family, society, and nature.
Understand the harmony in human beings, family, society, and nature.
Strengthen self-reflection abilities.
Develop commitment and courage to act based on human values.
Unit-wise Syllabus:
UNIT-I: Course Introduction

Purpose and motivation for the course.
Self-exploration and its process.
Human aspirations for continuous happiness and prosperity.
Understanding happiness, prosperity, and living in harmony.
UNIT-II: Understanding Harmony in the Human Being

Understanding the sentient 'I' and the material 'Body'.
Needs of 'Self' and 'Body'.
Characteristics and activities of 'I' and harmony within 'I'.
Harmony of 'I' with the Body.
UNIT-III: Understanding Harmony in the Family and Society

Values in human-human relationships.
Meaning of justice, trust, and respect in relationships.
Harmony in society - resolution, prosperity, fearlessness, and co-existence.
Visualizing universal harmonious order in society.
UNIT-IV: Understanding Harmony in Nature and Existence

Harmony in nature - interconnectedness and mutual fulfillment.
Existence as co-existence of interacting units.
Holistic perception of harmony at all levels.
UNIT-V: Implications on Professional Ethics

Natural acceptance of human values.
Ethical human conduct and basis for humanistic education.
Competence in professional ethics and transitioning to a universal human order.
Text Book:

Human Values and Professional Ethics by R R Gaur, R Sangal, G P Bagaria, Excel Books, New Delhi, 2010.
References:

Jeevan Vidya: Ek Parichaya, A Nagaraj, Jeevan Vidya Prakashan, Amarkantak, 1999.
Human Values, A.N. Tripathi, New Age Intl. Publishers, New Delhi, 2004.
Course Outcomes:

Develop awareness of oneself and surroundings.
Become more responsible and handle problems with sustainable solutions.
Enhance critical thinking ability.
Apply learned values to real-life situations.
Prepare for higher-level courses on human values and ethics.
Mapping of Course Outcomes with Programme Outcomes:
Course Code: 21AICP408
Course Title: DATABASE MANAGEMENT SYSTEMS LAB

Total Lab Hours: 3
Credits: 1.5

Course Objectives:

Understand and use a relational database system effectively.
Grasp the role of a database management system within an organization.
Comprehend basic database concepts, including the relational data model's structure and operation.
Construct simple to moderately advanced database queries using Structured Query Language (SQL).
List of Exercises:

Implementation of queries for a student database.
Data Definition Language (DDL) – with constraints and without constraints.
Data Manipulation Language (DML) – Insert, Delete, Update, Select, and Truncate.
Transaction Control Statement – Commit, Savepoint, Rollback.
Data Control Statement – Grant, Revoke.
Data Projection Statement – Multi-column, alias name, arithmetic operations, Distinct records, concatenation, WHERE clause.
Data Selection Statement – Between, AND, NOT IN, LIKE, relational operators, and logical operators.
Aggregate functions – COUNT, MAXIMUM, MINIMUM, SUM, AVERAGE, ORDER BY, GROUP BY, HAVING.
Joint queries – Inner join, Outer join, Self join, Cartesian join, or Cross join.
Subqueries – IN, NOT IN, SOME, ANY, ALL, EXISTS, NOT EXISTS.
Set operations – UNION, UNION ALL, INTERSECT, MINUS.
Database objects – Synonym, Sequences, Views, and Index.
Cursor.
Functions and procedures.
Trigger.
Exceptions.
Packages.
Factorial of a number.
Checking whether a number is prime or not.
Fibonacci series.
Course Outcomes:

Create a sample database using SQL DDL commands and develop simple and advanced SQL Queries for database manipulation.
Develop PL/SQL Functions, Procedures, Packages for specific database operations.
Demonstrate programming skills during viva questions related to solving real-world problems in Computer Science and Engineering.


Course Code: 21AICP409
Course Title: MACHINE LEARNING LAB

Total Practical Hours: 3
Credits: 1.5

Course Objectives:

Understand Gaussian densities and implement them using Python.
Implement classification, clustering, and regression algorithms in Python.
Implement convolutional neural network architecture using Python.
Solve challenging research problems in Speech and Image processing.
List of Exercises:

Linear and logistic regression with error estimation.
Implementation of univariate and multivariate Gaussian densities.
Dimensionality reduction using principal component analysis (PCA).
Clustering using:
a) k-means.
b) Gaussian mixture modeling (GMM).
Classification using:
a) Backpropagation neural network (BPNN).
b) Support vector machine (SVM).
Construction of decision tree and random forest.
Implementation of convolution neural network (CNN).
Sequence prediction using recurrent neural network (RNN).
Isolated-word speech recognition.
Face detection and tracking.
Object recognition.
Course Outcomes:

Understand fundamental concepts of machine learning.
Design and implement classification, clustering, and regression algorithms using Python.
Design and implement methods to solve real-life problems using suitable machine learning techniques.
Course Code: 21AICP410
Course Title: HASKELL PROGRAMMING LAB

Total Practical Hours: 3
Credits: 1.5

Course Objectives:

Understand and apply basic programming principles such as data types, conditionals, arrays, recursion, higher-order functions, and classes using Haskell.
Define arrays and use them for sorting numbers.
Utilize built-in modules and develop applications in Haskell.
Develop real applications like Tic-Tac-Toe and Anti-Spam using Haskell.
List of Exercises:

Write a program to find the largest among any three given numbers using if…then…else statement.
Write a program to find the factorial of a given number using recursion.
Write a program to create a list and reverse it using list comprehensions.
Write a program to generate the Fibonacci series using lazy evaluation.
Write a program to generate a binary tree using foldr and foldl functions.
Write programs to simulate sorting algorithms like insertion sort, bubble sort, selection sort, permutation sort, merge sort, quicksort using built-in functions.
Write a program to create two lists and combine them using Monoids.
Write a program to copy the contents of one file to another file.
Write a program to solve the unbeatable Tic-Tac-Toe problem.
Write a program to simulate Anti-spam in Facebook.
Course Outcomes:

Analyze and design computer programs based on pure functional programming principles.
Solve simple problems using basic data types and control structures in Haskell.
Implement file handling to store and retrieve real-time data using Haskell.
Course Code: 21AIPC501
Course Title: COMPUTER NETWORKS

Total Lecture Hours: 3
Credits: 3

Course Objectives:

Develop an understanding of modern network architectures from a design and performance perspective.
Introduce students to major concepts in wide-area networks (WANs), local area networks (LANs), and Wireless LANs (WLANs).
Provide opportunities for network programming and WLAN measurement ideas.
Unit-I: Data Communication Components

Data representation and flow
Various connection topologies
Protocols and standards
OSI model
Transmission media
LANs: Wired LANs, Wireless LANs
Bandwidth utilization techniques: Multiplexing (Frequency division, Time division, Wave division)
Spread spectrum concepts
Unit-II: Data Link Layer and Medium Access Sub Layer

Error detection and correction fundamentals
Flow control and error control protocols
Multiple access protocols: Pure ALOHA, Slotted ALOHA, CSMA/CD, CDMA/CA
Unit-III: Network Layer

Switching
Logical addressing: IPv4, IPv6
Address mapping: ARP, RARP, BOOTP, DHCP
Routing protocols
Unit-IV: Transport Layer and Application Layer

Process-to-process communication
UDP, TCP, SCTP protocols
Congestion control
QoS improving techniques
Application Layer protocols: DNS, DDNS, TELNET, EMAIL, FTP, HTTP, SNMP, Bluetooth, Firewalls, Cryptography basics
Unit-V: Services Mechanism

OSI security architecture
Classical encryption techniques
Finite Fields and Number Theory
Groups, Rings, Fields
Modular arithmetic
Prime numbers, Fermat’s and Euler’s theorem
Discrete logarithms
Text Books:

William Stallings, Data and Computer Communication, 10th Edition, Pearson Prentice Hall India, 2013.
Peter L Dordal, An Introduction to Computer Networks, 1st Edition, 2019.
References:

M. Dave, Computer Networks, 1st Edition, Cengage Learning India, 2012.
Keshav, An Engineering Approach to Computer Networking, 1st Edition, Pearson, 2014.
Course Outcomes:

Understand the functions of layering and protocols.
Summarize the devices, protocols, and standards for designing a network.
Construct and implement switching and routing concepts.
Select appropriate protocols and techniques for maintaining consistent information flow.
Illustrate the functions of electronic mail, HTTP, DNS, and SNMP.
ANNAMALAI UNIVERSITY

81

FEAT

R2021

B.E. COMPUTER SCIENCE AND ENGINEERING (Artificial Intelligence and Machine Learning)

Course Code: 21AIPC502
Course Title: Image and Speech Processing

Course Objectives:

Learn Digital Image and Speech fundamentals.
Analyze simple Image processing techniques.
Understand Image compression and Enhancement techniques.
Learn Short-time Fourier analysis.
Units:

Digital Image Processing:

Image Categories
Steps in Digital Image Processing
Components of an Image Processing System
Digital Image Fundamentals
Elements of Visual Perception
Electromagnetic Spectrum
Image Sensing and Acquisition
Image Sampling and Quantization
Basic Relationship between Pixels
Image Enhancement in Spatial Domain:

Basic Gray Level Transformations
Histogram Processing
Enhancement using Arithmetic and Logic Operations
Spatial Filtering
Smoothing Spatial Filters
Sharpening Spatial Filters
Combining Spatial Enhancement Methods
Color Image Processing and Segmentation:

Color Fundamentals
Color Models
Pseudo color Image Processing
Image Segmentation
Detection of Discontinuities
Edge Linking and Boundary Detection
Use of Motion In Segmentation
Basis of Wavelet Transforms
Lossless and Lossy Compression Techniques
Fundamentals of Digital Speech Processing:

Discrete-Time Signals and Systems
Sampling Speech Signals
Transform Representation of Signals and Systems
Speech Production Mechanism
Acoustic Phonetics
Time-Domain Models for Speech Processing
Time-Dependent Processing of Speech
Short-Time Energy and Average Magnitude
Short-Time Average Zero-Crossing Rate
Speech Vs. Silence Discrimination
Pitch Period Estimation
Short-Time Autocorrelation Function
Short-Time Fourier Analysis:

Fourier Transform of Speech Signal
Linear Predictive Coding of Speech
Linear Predictive Analysis
Computation of Gain
Durbin’s Recursive Solution
Man-Machine Communication
Voice-Response Systems
Speaker Recognition Systems
Speech Recognition Systems
Text Books:

R.C. Gonzalez and Rafael. C. Woods, Richard E, "Digital image processing," fourth edition, Pearson education, 2018.
L. R. Rabiner and R.W. Schafer, "Digital processing of speech signals," Pearson education, 2005.

Course Code: 21AIPC503
Course Title: NEURAL COMPUTING IN AI

Total Lecture Hours: 3
Credits: 3

Course Objectives:

Provide a comprehensive understanding of neural networks from an engineering perspective.
Understand important design concepts of neural architectures in various applications.
Explore applications in recommender systems, machine translation, and reinforcement learning.
Gain knowledge on methodologies underlying Neuro-Fuzzy and Soft Computing.
Unit-I: Introduction to Neural Network & Learning

Models of a Neuron
Neural Networks Viewed as Directed Graphs
Network Architectures
Knowledge Representation
Error-Correction Learning
Memory-Based Learning
Hebbian Learning
Competitive Learning
Boltzmann Learning
Unit-II: Perceptrons

Least-Mean-Square Algorithm
Perceptron Convergence Theorem
Back-Propagation Algorithm
XOR Problem
Feature Detection
Regularization Networks
Generalized Radial-Basis Function Networks
Unit-III: Support Vector Machines & Self-Organizing Map

Optimal Hyperplane for Linearly Separable Patterns
Optimal Hyperplane for Non-separable Patterns
Support Vector Machines for Pattern Recognition
XOR Problem Revisited
Support Vector Machines for Nonlinear Regression
Self-Organizing Map
Learning Vector Quantization
Hierarchical Vector Quantization
Unit-IV: Fuzzy Systems

Utility and Limitations of Fuzzy Systems
Fuzzy Sets and Membership
Classical Sets vs. Fuzzy Sets
Crisp Relations vs. Fuzzy Relations
Tolerance and Equivalence Relations
Fuzzification and Defuzzification
Unit-V: Fuzzification & Defuzzification

Features of Membership Function
Fuzzification to Crisp Sets
Defuzzification to Scalars
λ-Cuts for Fuzzy Relations
Logic and Fuzzy Systems
Text Books:

Raul Rojas, Neural Networks: A Systematic Introduction, Springer Science & Business Media, 2013.
Timothy J. Ross, Fuzzy Logic with Engineering Applications, 3rd Edition, John Wiley & Sons Ltd, 2010.
References:

Alianna J. Maren, Craig T. Harston, Robert M. Pap, Handbook of Neural Computing Applications, Academic Press, 2014.
Robert Fuller, Introduction to Neuro-Fuzzy Systems, Springer Science & Business Media, 2013.
James J. Buckley, Esfandiar Eslami, An Introduction to Fuzzy Logic and Fuzzy Sets, Springer Science & Business Media, 2013.
Simon Haykin, Neural Networks – A Comprehensive Foundation, 2nd edition, Pearson Prentice Hall, 2005.
Course Outcomes:

Understand neural networks and their learning processes.
Apply design concepts of neural architectures.
Implement learning processes for various applications.
Design methodologies for Neuro-Fuzzy and Soft Computing applications.

21AIPC504 - KNOWLEDGE ENGINEERING AND INFERENCE

Course Objectives:

To familiarize students with concepts essential for creating knowledge bases and expert systems.
To enable the extraction of knowledge from experts using elicitation techniques.
To analyze the characteristics of existing systems and compare different approaches through case studies.
To implement an expertise model as a prototype.
Unit I: Introduction to Knowledge Engineering

Understanding Data, Information, and Knowledge.
Skills of a Knowledge Engineer.
Overview of Knowledge-Based Systems.
Types of Knowledge-Based Systems: Expert Systems, Neural Networks, Case-Based Reasoning, etc.
Unit II: Knowledge Representation

Knowledge Acquisition.
Representation and Reasoning.
Developing Rule-Based Systems.
Semantic Networks, Frames, and Hybrid Knowledge-Based Systems.
Unit III: Trends in Knowledge Engineering

Information Technology in Business Management.
Knowledge Networking Systems.
Issues and Challenges in Knowledge Engineering.
Real-World Applications and Future Trends.
Unit IV: Inferential Knowledge and Problem Solving

State-Space Representation and Search Algorithms.
Heuristic Knowledge and Problem Decomposition.
Blackboard Model and Constraint-Based Knowledge.
Unit V: Reasoning in Knowledge

Inference Using Symbolic Logic.
Forward and Backward Reasoning.
Resolution Principle and Database Inference.
Other Inference Methods.
Text Books:

Gheorghe Tecuci, Dorin Marcu, Mihai Boicu, David A Schum - "Knowledge Engineering: Building Cognitive Assistants for Evidence-Based Reasoning" (Cambridge University Press, 2016).
Simon Kendal, Malcolm Creen - "An Introduction to Knowledge Engineering" (Springer, 2nd Edition, 2007).
References:

Yingxu Wang - "Developments in Natural Intelligence Research and Knowledge Engineering: Advancing Applications" (IGI series, 2012).
Makoto Nagao - "Knowledge and Inference" (Academic Press, 1990).
J Hendler, H Kitano, B Nebel - "Foundations of Artificial Intelligence" (Elsevier, 1st Edition, 2008).
Thomas B Cross - "Knowledge Engineering: The Uses of Artificial Intelligence in Business" (TECHtionary, 2nd Edition).
Course Outcomes:

Stay updated with current trends in knowledge engineering.
Extract and utilize expert knowledge effectively.
Understand logical inference in intelligent agents.
Communicate within a network of knowledge-based systems.
Apply artificial intelligence techniques in business scenarios.


21AICP507 - COMPUTER NETWORKS LAB

Course Objectives:

Understand the functioning of various communication protocols.
Analyze different routing algorithms.
Grasp the concept of data transfer between nodes.
Implement address resolution protocol, remote method invocation, server, and client.
List of Exercises:

Networking Commands.
Socket program implementation for Echo.
Client and server implementation for chat using TCP.
File transfer between client and server using TCP/IP.
Remote command execution implementation.
Client and server application using UDP.
Address Resolution Protocol implementation.
Socket program to download a web page.
Remote Method Invocation implementation.
Server in C and Client in Java implementation.
Course Outcomes:

Proficiency in network administration commands and their application in various scenarios.
Implementation of Socket programming for Client-Server Architecture, Packet Content Analysis for different Protocols, and Routing Protocols implementation.
Ability to effectively respond to viva questions related to programming skills for real-world problem-solving in Computer Science and Engineering.

**21AICP508 - IMAGE AND SPEECH PROCESSING LAB**

**Course Objectives:**
1. Illustrate image processing concepts through practical image processing using Python.
2. Analyze simple image enhancement techniques in the spatial domain.
3. Understand color image processing concepts.
4. Study various speech processing concepts using signal processing techniques.

**List of Exercises:**
1. Implementation of simple and adaptive thresholding for an image.
2. Application of smoothening and sharpening filters in the spatial domain.
3. Implementation of edge detection methods.
4. Histogram equalization for full and partial images.
5. Fourier transform of an image.
6. Displaying individual color components of a color image.
7. Implementation of Huffman encoding and decoding for an image.
8. Image segmentation using the watershed algorithm.
9. Morphological dilation and erosion operations for an image.
10. Extraction of SIFT and SURF features from image samples.
11. Convolution and correlation of speech signals.
12. Low-pass and high-pass filtering of speech signals.
13. Extraction of pitch and formants from speech signals.
14. Calculation of short-time energy and zero crossing rate of pre-processed speech signals.
15. Extraction of MFCC features from speech signals.
16. Text-dependent speaker recognition using Dynamic Time Warping.

**Course Outcomes:**
1. Ability to work with digital image and speech fundamentals using Python.
2. Understanding of image enhancement techniques in the spatial domain and their application in image processing.
3. Proficiency in applications of image and speech processing techniques.

**21AICP509 - NEURAL COMPUTING LAB**

**Course Objectives:**
1. Provide a comprehensive understanding of neural networks from an engineering perspective.
2. Understand important design concepts of neural architectures in various applications.
3. Familiarize students with various computing algorithms in FLNN (Fuzzy Logic Neural Networks) using software tools.
4. Understand the operation of basic elements in fuzzy logic and neural networks through simulation.

**List of Exercises:**
1. Implement the concept of Perceptrons.
2. Simulate Back-Propagation Neural Networks.
3. Implement Radial Basis Function Neural Networks.
4. Implement a real-world application using Support Vector Machine.
5. Design a Self Organizing Map for an application.
6. Develop fuzzy membership functions and properties of fuzzy sets.
7. Develop logic for fuzzy relations.
8. Verify logic using fuzzy relations.
9. Design fuzzy controller systems using the fuzzy tool of Matlab.
10. Develop an application using Neural Networks/Fuzzy Logic.

**Course Outcomes:**
1. Demonstrate basic concepts of fuzzy logic and neural networks through simulation.
2. Develop logic for given problem statements using operations in fuzzy logic and neural networks.
3. Implement and analyze various neural computing algorithms and their applications.

**21AIPC601 - DEEP LEARNING FOR VISUAL COMPUTING**

**Course Objectives:**
1. Provide an understanding of the mathematical and machine learning basics of deep learning for Visual Computing.
2. Familiarize students with various deep learning tools for Visual Computing such as Python, TensorFlow, Scala, PyTorch, etc.
3. Enable students to set up a test environment for deep learning in visual computing.

**Unit-wise Breakdown:**

**Unit I: Applied Math and Machine Learning Basics**
- Linear Algebra
- Probability and Information Theory
- Numerical Computation
- Machine Learning Basics
- Deep Feedforward Networks
- Regularization and Optimization for Deep Learning
- Convolutional Networks
- Sequence Modeling

**Unit II: Deep Learning Research**
- Linear Factor Models
- Autoencoders
- Structured Probabilistic Models
- Monte Carlo Methods
- Deep Generative Models

**Unit III: Fundamentals of Image-Based Visual Computing**
- Data Representation and Visualization
- Image Discretization and Noise Reduction
- Convolution and Linear Systems
- Feature Detection and Edge Detection
- Non-Linear Filters

**Unit IV: Geometric Visual Computing**
- Geometric Transformations
- Linear and Affine Transformations
- Projective Transformation
- Epipolar Geometry
- Radiometric Visual Computing

**Unit V: Radiometric Visual Computing**
- Light, Radiometry, and Color
- Color Reproduction and Management
- Photometric Processing
- Image Composition and Photometric Stereo
- Visual Content Synthesis and Graphics Programming

**Text Books:**
1. Aditi Majumder, M. Gopi, "Introduction to Visual Computing: Core Concepts in Computer Vision, Graphics, and Image Processing," CRC Press, 2018.
2. Ian Goodfellow, Yoshua Bengio, Aaron Courville, "Deep Learning," MIT Press, 2016.

**References:**
1. Jon Krohn, Beyleveld Grant, Bassens Aglaé, "Deep Learning Illustrated: A Visual, Interactive Guide to Artificial Intelligence," Addison-Wesley, 2019.
2. Hyatt Saleh, "Applied Deep Learning with PyTorch," Packt, 2019.
3. Pradeep Pujari, Md., Rezaul Karim, Mohit Sewak, "Practical Convolutional Neural Networks," Packt Publishing, February 2018.
4. Ragav Venkatesan, Baoxin Li, "Convolutional Neural Networks in Visual Computing (Data-Enabled Engineering)," CRC Press, September 2017.

**Course Outcomes:**
1. Understand deep learning principles for Visual Computing and set up a development environment.
2. Perform image classification and learning tasks.
3. Detect objects and implement convolutional neural network autoencoding.
4. Gain knowledge about radiometric and geometric visual computing.

**21AIPC602 - EMBEDDED SYSTEMS AND INTERNET OF THINGS (IoT)**

**Course Objectives:**
1. Familiarize students with the trends and challenges of Embedded Systems.
2. Impart knowledge in Real-Time Operating Systems (RTOS) and scheduling algorithms.
3. Introduce concepts of Internet of Things (IoT), its network, communication protocols, and Internet of Everything (IoE).
4. Develop algorithms using Raspberry Pi and Arduino.

**Unit-wise Breakdown:**

**Unit I: Introduction to Embedded Systems**
- Applications and features of embedded systems
- Challenges and recent trends
- Selection of processors
- Embedded firmware design and development languages
- Embedded development life cycle

**Unit II: Real-Time Operating Systems**
- Task states and multitasking
- Context switches and kernels
- Task swapping methods and scheduler algorithms
- Inter-process communication mechanisms
- Overview of ARM Architecture

**Unit III: Introduction to IoT**
- Characteristics and design of IoT
- Functional blocks and communication models
- Machine to Machine (M2M) communication
- Software-defined Network (SDN) and Cloud Computing

**Unit IV: Network and Communication Aspect**
- Wireless medium access and MAC protocols
- Routing protocols and sensor deployment
- Data aggregation and dissemination
- Applications of IoT in home automation, industry, surveillance, etc.

**Unit V: Raspberry Pi with Python and Arduino**
- Building IoT systems with Raspberry Pi
- IoT physical design using Python
- IoT device building blocks and programming with Python
- Introduction to Arduino and its applications
- Evolution of IoE and its benefits

**Text Books:**
1. Marilyn Wolf, "Computers as Components-Principles of Embedded Computing System Design," 4th edition, Morgan Kaufmann Publishers, 2016.
2. Vijay Madisetti, Arshdeep Bahga, "Internet of Things: A Hands-On Approach," Orient Blackswan Pvt. Ltd., New Delhi, 2015.

**References:**
1. Jeeva Jose, "Internet of Things," 1st edition, KBP House, 2018.
2. Shibu K.V, "Introduction to Embedded System," Tata McGraw-Hill, 2009.
3. Steve Heath, "Embedded Systems Design," 2nd edition, Newnes/An imprint of Elsevier, 2005.
4. Rajkamal, "Embedded Systems, Architecture, Programming and Design," Tata McGraw Hill, 2003.

**Course Outcomes:**
1. Recognize key features of embedded systems and their functions.
2. Understand extra-functional requirements and tools in embedded systems.
3. Identify key factors and functionalities in IoT.
4. Understand IoT protocols and applications through wireless communication.
5. Comprehend concepts of IoT and IoE using Raspberry Pi and Arduino.


**21AICP607 - DEEP LEARNING TOOLS LAB**

**Course Objectives:**
1. Learn to create and manipulate tensors using TensorFlow tool.
2. Understand Applied Deep Learning with PyTorch.
3. Develop applications for artificial intelligence using the Scala programming language.
4. Learn about Character-Level RNN.

**List of Exercises:**
1. Introduction to TensorFlow.
2. Learning about Features and Outliers.
3. Working with Training Sets and Test Sets.
4. Scala program to demonstrate examples of collection list and for loop.
5. Appending and merging Lists using Scala.
6. Scala List class and pattern matching.
7. L2 Regularization and Correlated Features.
8. Classifying Names with a Character-Level RNN.
9. Generating Shakespeare with a Character-Level RNN.

**Course Outcomes:**
1. Create and manipulate tensors using TensorFlow and understand TensorFlow concepts.
2. Understand supervised learning, working with features, and labels.
3. Acquire knowledge of Convolutional Neural Networks (CNN), Recurrent Neural Networks (RNN), and their applications in deep learning.
21AICP608

**EMBEDDED SYSTEMS AND INTERNET OF THINGS (IoT) LAB**

**Course Objectives:**
1. Understand the working principle of Embedded Systems.
2. Utilize various sensors in IoT applications.
3. Learn to use tools for designing IoT applications.
4. Gain knowledge about designing GUI and games using Python.

**List of Exercises:**

**EMBEDDED SYSTEMS**
1. Alphanumeric LCD interface using 8051 microcontroller.
2. Study of ARM evaluation system.
3. Flashing of LEDs using ARM (LPC2148).
4. Interfacing keyboard and LCD using ARM (LPC2148).
5. Temperature sensor interface using ARM (LPC2148).

**IoT**
1. Distance Measurement.
2. Identifying Moisture content in Agricultural Land.
3. Fire Alarm Indicator.
4. Basic Home Automation.
5. Identifying Room Temperature.
6. Controlling PWM Signals.
7. Designing a Calculator using NumPy.
8. Designing a Game using PyGame.
9. Designing frontend GUI using TKinter.
10. Identification of Earthquake.
11. Implementation of sorting mechanism.
12. Accessing GPIO using Google Assistant.
13. Creating a video player.
14. Uploading data to the cloud and monitoring it.
15. Connecting to social media (Twitter).

**Course Outcomes:**
1. Understand the basic elements of microcontrollers and their programming.
2. Gain knowledge of Raspberry Pi3 peripherals and troubleshooting.
3. Identify the necessary kits for solving real-world problems and write the corresponding code.

**EMBEDDED SYSTEMS AND INTERNET OF THINGS (IoT) LAB**

**Course Objectives:**
1. Understand the working principle of Embedded Systems.
2. Utilize various sensors in IoT applications.
3. Learn how to use various tools in IoT for designing applications.
4. Acquire knowledge about designing GUI and games in Python.

**List of Exercises:**

**EMBEDDED SYSTEMS**
1. Alphanumeric LCD interface using 8051 microcontroller.
2. Study of ARM evaluation system.
3. Flashing of LEDs using ARM (LPC2148).
4. Interfacing keyboard and LCD using ARM (LPC2148).
5. Temperature sensor interface using ARM (LPC2148).

**IoT**
1. Distance Measurement.
2. Identifying Moisture content in Agricultural Land.
3. Fire Alarm Indicator.
4. Basic Home Automation.
5. Identifying Room Temperature.
6. Controlling PWM Signals.
7. Designing a Calculator using NumPy.
8. Designing a Game using PyGame.
9. Designing frontend GUI using TKinter.
10. Identification of Earthquake.
11. Implementation of sorting mechanism.
12. Accessing GPIO using Google Assistant.
13. Creating a video player.
14. Uploading data to the cloud and monitoring it.
15. Connecting to social media (Twitter).

**Course Outcomes:**
1. Comprehend the basic elements of microcontrollers and their programming.
2. Gain knowledge of Raspberry Pi3 peripherals and troubleshooting.
3. Identify the necessary kits required for solving real-world problems and write the corresponding code.

**21ETHS701 - SOCIAL AND ETHICAL ISSUES IN AI**

**Course Objectives:**
1. Analyze whether AI poses an existential threat to humanity.
2. Prevent learning algorithms from acquiring morally objectionable biases.
3. Study the ethical rules for using self-driving cars.
4. Ensure accountability when building artificial moral agents.

**Unit I: Artificial Intelligence Ethics**
- Ethics in machine learning and other AI algorithms
- Artificial general intelligence and machines with moral status
- Singularity: analysis and negotiation of singularity
- Uploading and consciousness in a post-singularity world

**Unit II: Superintelligent Agents**
- Orthogonality of motivation and intelligence
- Racist AI and algorithmic decision making
- Challenges in algorithmic accountability

**Unit III: Killer Robots in War and Civil Society**
- Autonomous weapon systems and human oversight
- Future of workplace automation and employment
- Polanyi's Paradox and labor market polarization

**Unit IV: Artificial Moral Agent Ethics**
- Moral agency, moral norms, and moral Turing test
- Ethics of self-driving cars and crash avoidance strategies
- Human-robot collaborations and potential responsibilities

**Unit V: AI as a Positive and Negative Factor in Global Risk**
- Anthropomorphic bias and design space of AI
- Friendly AI and technical failures
- AI vs human intelligence enhancement

**Textbooks:**
1. "Ethical Artificial Intelligence" by Bill Hibbord
2. "The Ethics of Artificial Intelligence" by N. Bostrom and E. Yudkowsky

**References:**
1. "The Singularity: A Philosophical Analysis" by D. Chalmers
2. "The Superintelligent Will: Motivation and Instrumental Rationality" by N. Bostrom
3. "Killer Robots" by R. Sparrow
4. "Why Are There Still So Many Jobs?" by D. Autor

**Course Outcomes:**
1. Demonstrate knowledge of philosophical issues in AI ethics.
2. Develop superintelligent systems with ethical considerations.
3. Understand the impact of workplace automation on employment.
4. Appreciate the responsibilities associated with artificial moral agents.
5. Ensure the development of safe and ethical intelligent systems without global risks.

**21AIPC702 - EVOLUTIONARY OPTIMIZATION ALGORITHMS**

**Course Objectives:**
1. Learn about constrained and unconstrained optimization.
2. Gain knowledge of recent evolutionary algorithms.
3. Develop skills in biogeography techniques.
4. Implement combinatorial optimization problems.

**Unit I: Introduction to Optimization**
- Unconstrained optimization and constrained optimization
- Multi-objective optimization and multimodal optimization
- Combinatorial optimization and hill climbing
- Genetic algorithms: binary and continuous genetic algorithms

**Unit II: Recent Evolutionary Algorithms**
- Simulated annealing: algorithms and implementation issues
- Ant colony optimization: pheromone models and continuous optimization
- Particle swarm optimization: basic algorithm and variations

**Unit III: Biogeography Based Optimization**
- Biogeography and optimization process
- Biogeography-based optimization (BBO) and its extensions
- Other evolutionary algorithms: tabu search, artificial fish swarm, etc.

**Unit IV: Combinatorial Optimization**
- Traveling salesman problem (TSP) and initialization methods
- TSP representations, crossover, and mutation
- Evolutionary algorithm for TSP and graph coloring problem

**Unit V: Constrained Optimization**
- Penalty function approaches and constraint handling methods
- Multi-objective optimization: goals, algorithms, and Pareto optimality

**Textbooks:**
1. "Multimodal Optimization by Means of Evolutionary Algorithms" by Mike Preuses
2. "Evolutionary Optimization Algorithms" by Dan Simon

**References:**
1. "Optimization Algorithms and Applications" by Rajesh Kumar Arora
2. "Introduction to Evolutionary Algorithms" by Xinjie Yu and Mitsuo Gen
3. "Multi-Objective Optimization using Evolutionary Algorithms" by Kalyanmoy Deb

**Course Outcomes:**
1. Design and solve constrained and unconstrained optimization problems.
2. Implement recent evolutionary optimization techniques.
3. Apply biogeography-based optimization methods.
4. Solve combinatorial optimization problems using evolutionary algorithms.
5. Understand and apply principles of multi-objective optimization.

**21AICP706 - OPTIMIZATION TECHNIQUES LAB**

**Course Objectives:**
1. Acquire specific knowledge and skills on optimization techniques.
2. Learn feasibility methods for solving optimization problems.
3. Design algorithms for finding optimized solutions.
4. Understand and implement optimization techniques using evolutionary algorithms.

**List of Exercises:**
1. Constrained optimization using genetic algorithm
2. Unconstrained optimization using genetic algorithm
3. Simple simulated annealing algorithm
4. Ant colony optimization algorithm
5. Particle swarm optimization algorithm
6. Tabu search algorithm
7. Artificial bee colony optimization algorithm
8. Traveling salesman problem using evolutionary algorithm
9. Constrained optimization using penalty method
10. Multi-objective optimization using evolutionary algorithm

**Course Outcomes:**
1. Understand and implement constrained and unconstrained optimization problems.
2. Implement biogeography-based optimization techniques.
3. Appreciate the principles of multi-objective optimization techniques.

**21ETIT707 - SEMINAR/INDUSTRIAL TRAINING**

**Course Objectives:**
1. Work/training on a technical topic/field related to Artificial Intelligence and Machine Learning to acquire written/oral presentation skills and practical knowledge.
2. Develop the ability to write technical papers for conferences.
3. Train and develop skills in solving problems related to Artificial Intelligence and Machine Learning.
4. Gain hands-on working experience in reputed organizations.

**Course Details:**
- Students will work for two periods per week under the guidance of a student counsellor.
- They will present a seminar of 15-30 minutes on a technical topic related to AI and ML, followed by a discussion and defense of the presentation.
- A brief copy of the presentation should be submitted.
- Evaluation will be based on technical presentation, report, and interaction during the seminar.
- Students will undertake a training program in reputed organizations related to AI and ML during summer vacation for a minimum of four weeks.
- A detailed report on the training must be submitted within ten days from the start of the seventh semester.
- Evaluation will be done through a viva-voce examination conducted by a team of staff members nominated by the Head of the Department.

**Course Outcomes:**
1. Confidence in facing the audience and participating in group discussions during corporate interviews.
2. Ability to work in the actual environment and utilize technical resources effectively.
3. Application of prior knowledge in problem-solving using international AI and ML standards.
4. Analysis of AI and ML problems to propose meaningful solutions.
5. Presentation of solutions through written and oral communication.

**21AIPV803 - PROJECT WORK AND VIVA VOCE**

**Course Objectives:**
1. Develop the ability to identify and define a problem.
2. Conduct a literature review to understand existing solutions and approaches.
3. Implement the problem using appropriate methodologies and analyze the results obtained.
4. Train students in preparing comprehensive project reports and facing reviews and viva voce examinations.

**Course Outcomes:**
1. Ability to tackle challenging practical problems by formulating appropriate methodologies.
2. Conduct experiments using computer software and hardware effectively.
3. Present conclusions clearly and effectively using tables and graphs in project reports.
4. Analyze and address any shortcomings encountered during the implementation of technical problems.
5. Implement research problems in current thrust areas using practical knowledge gained during the course.